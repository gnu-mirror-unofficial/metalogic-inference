
bin_PROGRAMS = mli

mli_SOURCES = MLI.cc MLI.hh gc.cc gc.hh main.cc \
  polymorphy.hh relation.hh table-stack.hh exception.hh pragmas.hh \
  kleenean.hh debug.hh write-style.cc write-style.hh \
  basictype.cc basictype.hh database.cc database.hh location-type.hh \
  database-lexer.cc \
  database-parser.cc database-parser.hh location.hh \
  directive-lexer.cc \
  directive-parser.cc directive-parser.hh \
  definition.cc definition.hh  inferenceengine.cc inferenceengine.hh \
  metacondition.cc metacondition.hh  precedence.cc precedence.hh \
  proposition.cc proposition.hh  reassign.hh  substitution.cc substitution.hh \
  function.cc function.hh \
  gmp.hh hoare_logic.cc hoare_logic.hh

dist_noinst_HEADERS = database-parser.yy database-lexer.ll directive-parser.yy directive-lexer.ll


AM_CPPFLAGS = -DDATADIR='@mlidatadir@'
AM_CXXFLAGS = -std=c++20

LEXER = flex
PARSER = bison

LEXERFLAGS = --prefix=mli
PARSERFLAGS = --verbose --report=all -Wcounterexamples # -Wall -Wno-precedence -Wno-yacc # -Werror


database-lexer.cc: database-lexer.ll database-parser.hh
	$(LEXER) $(LEXERFLAGS) -o $(srcdir)/database-lexer.cc $(srcdir)/database-lexer.ll


# Not in this rule as not generated by bison, only copied: location.hh position.hh
database-parser.cc database-parser.hh: database-parser.yy
	$(PARSER) $(PARSERFLAGS) -o $(srcdir)/database-parser.cc $(srcdir)/database-parser.yy


directive-lexer.cc: directive-lexer.ll directive-parser.hh
	$(LEXER) --prefix=mli1 -o $(srcdir)/directive-lexer.cc $(srcdir)/directive-lexer.ll


# Not in this rule as not generated by bison, only copied: location.hh position.hh
directive-parser.cc directive-parser.hh: directive-parser.yy
	$(PARSER) $(PARSERFLAGS) -o $(srcdir)/directive-parser.cc $(srcdir)/directive-parser.yy

