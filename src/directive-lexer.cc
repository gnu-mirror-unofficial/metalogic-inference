#line 1 "../../mli-root/src/directive-lexer.cc"

#line 3 "../../mli-root/src/directive-lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer mli1FlexLexer

#ifdef yyalloc
#define mli1alloc_ALREADY_DEFINED
#else
#define yyalloc mli1alloc
#endif

#ifdef yyrealloc
#define mli1realloc_ALREADY_DEFINED
#else
#define yyrealloc mli1realloc
#endif

#ifdef yyfree
#define mli1free_ALREADY_DEFINED
#else
#define yyfree mli1free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int mli::directive_lexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 146
#define YY_END_OF_BUFFER 147
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[585] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  147,  144,    1,    2,    1,  143,  125,   63,
       64,   78,   48,   79,   49,   92,   47,   50,   51,   59,
       52,   94,   69,   70,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   73,   74,   75,   76,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  146,  146,  117,  121,
      122,  123,  123,  114,  115,  114,  114,  142,  127,  126,
      146,    1,    0,    2,   93,   92,   95,   94,    0,   94,

       94,   94,   94,   94,   94,   84,   94,   94,   94,   94,
       94,   94,   80,   94,   94,   94,   94,   94,   94,   23,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,  143,   46,   62,   94,   94,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  117,  121,  122,
        0,    0,  106,  101,  104,    0,  105,  107,  108,  109,
      110,  111,  112,  113,    0,    0,    0,  142,  140,  141,
      132,  128,  130,  131,  133,  134,  135,  136,  137,  138,
      139,  140,    0,    0,    0,   21,   94,   94,   94,   94,

       94,   94,   94,   94,   40,   94,   94,   86,   94,   94,
       94,   94,   94,    6,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   90,   94,   94,   94,
       94,   94,   94,   94,   94,   94,    0,    0,    1,  116,
       96,   65,   66,   67,   68,   94,   94,   94,   94,   94,
       61,   42,   41,   43,   44,   45,   60,   53,   54,   55,
       56,   57,   58,   77,   71,   72,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  101,  103,  102,    0,   98,   97,  128,  130,
      129,  118,   94,   94,   94,   94,   94,   94,   94,   82,

       94,   94,   94,   94,   94,   94,   94,   94,   85,   22,
       24,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       81,   94,   94,   94,   15,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,  124,  145,    0,    0,    0,
        0,    0,    0,    0,    0,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,  120,  119,  101,  103,  102,   99,  100,
      128,  129,   87,   91,   94,   94,    5,   94,   94,   25,
       12,   94,   94,   94,   94,   16,    7,   27,   94,   28,
       31,   94,   94,   94,   94,   94,   94,   89,   17,   94,

       30,   94,   94,   94,   94,   94,   83,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  103,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   26,   94,   20,   94,   94,   94,   38,
       94,   94,   94,   13,   94,   94,   94,    0,    0,   94,
       94,    0,    0,   94,    0,   94,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  103,   94,   94,   94,
       94,    0,   35,   10,   39,   94,   94,   94,   94,   94,
       94,   94,   18,   94,   11,   94,   94,   94,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  103,   94,   88,   34,   94,    0,   94,   94,
       94,    8,   94,   94,   94,   14,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,  103,   94,   94,    0,   29,   33,   37,   94,    0,
       94,  103,   94,    9,    0,   32,    0,   94,  103,   19,
        0,    0,   94,    0,    0,   94,    0,    0,   94,    0,
        0,   94,    0,    0,   36,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
        0,    0,    4,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    5,    5,    5,    7,    5,    8,
        9,    5,   10,   11,   12,   13,    5,   14,   14,   14,
       14,   14,   14,   14,   14,   15,   15,   16,   17,   18,
       19,   20,   21,   21,   22,   22,   22,   22,   22,   22,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   24,   23,   23,   23,   23,   23,
       25,   26,   27,   21,   28,   21,   29,   30,   31,   32,

       33,   34,   35,   36,   37,   23,   38,   39,   40,   41,
       42,   43,   23,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
       91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
      101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
      111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
      121,    1,    1,  122,  123,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  124,  125,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  126,  127,  128,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  129,  127,  127,  130,
      131,  131,  131,  132,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[133] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    1,
        1,    1,    1,    4,    4,    5,    5,    5,    5,    5,
        5,    4,    4,    4,    6,    7,    5,    5,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    5,    5,    5,    5,    5,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    1,    1,    1,    1,    1,    1,   10,    1,    1,
        1,    1
    } ;

static const flex_int16_t yy_base[606] =
    {   0,
        0,    0,    0,    0, 2606, 2580,  130,  131,    0,    0,
      132,  133,  134,  135,    0,    0,    0,    0,    0,    0,
        0,    0, 2579, 2752,  140, 2563,  141, 2752, 2752, 2752,
     2752,  132, 2752,  134, 2752,  136, 2752, 2752, 2752, 2752,
     2752,  138, 2393, 2752,  148,  150,  153,  155,  159,  162,
      171,  187,  164,  166,  174,  157,  196,  200,  207,  211,
      216, 2752, 2752, 2752, 2752,  117,    0,  212,  276,    0,
        0,  299,    0, 2408,    0,  331, 2752, 2460, 2752,    0,
     2434, 2277, 2321, 2752, 2752,  398, 2242,    0, 2752, 2752,
      423,  245,  169, 2288,  218,  220,    0,  239, 2228,  330,

      334,  332,  338,  360,  394,  241,  362,  400,  402,  366,
      404,  406,  248,  421,  441,  444,  446,  426,  451,  461,
      464,  466,  468,  470,  472,  475,  477,  481,  483,  485,
      502,  506,  508,  516, 2752, 2752, 2752,  140,  142,    0,
        0,  494,  417,  299,  521, 2031,  355,  435,  479, 2051,
      442,    0,    0,  558,    0,    0, 2102, 2752,    0, 2098,
     2040, 2007, 2752,  528,  530,  625, 2752, 2752, 2752, 2752,
     2752, 2752, 2752, 2752,  638, 1982,  477,    0, 2752, 2752,
     2752,  551,  553, 2752, 2752, 2752, 2752, 2752, 2752, 2752,
     2752,  651,  626, 1891, 1894,  556,  573,  563,  663,  584,

      634,  606,  596,  660,  561,  682,  647,  685,  687,  689,
      693,  697,  603,  598,  699,  701,  703,  705,  707,  719,
      721,  723,  727,  732,  729,  734,  636,  736,  739,  743,
      749,  760,  764,  766,  769,  772,  737,  801,  599,  169,
     2752, 2752, 2752, 2752, 2752,  232,  399,  486,  631,  660,
     2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752, 2752,
     2752, 2752, 2752, 2752, 2752, 2752,    0,  855,  919,  983,
     1047, 1111, 1175, 1239, 1231, 1295, 1359, 1423,    0,    0,
     1879, 1917,  779,  855,  868,  709, 2752, 2752,  783,  785,
     1489, 2752,  791,  857,  859, 1491,  793,  864, 1493,  787,

     1495, 1498, 1500,  828, 1510, 1502, 1512, 1516,  823,  826,
      877, 1518, 1521, 1523, 1525, 1529, 1533, 1543, 1551, 1553,
      889, 1558, 1555, 1561,  891, 1563, 1565, 1567, 1574, 1576,
     1578, 1571, 1581,  785, 1473, 2752, 2752, 1877, 1829, 1842,
     1813, 1810, 1777, 1798, 1766, 1714, 1707, 1431, 1689, 1641,
     1623, 1482, 1615, 1483, 1487, 1612, 1606, 1589, 1577, 1572,
     1569, 1543, 1538, 2752, 2752, 1587, 1604, 2752, 2752, 2752,
     1606, 2752, 1608, 1610, 1613, 1615, 1617, 1625, 1627, 1629,
     1631, 1633, 1635, 1637, 1643, 1646, 1648, 1652, 1657, 1662,
     1664, 1666, 1668, 1670, 1672, 1674, 1676, 1678, 1680, 1686,

     1682, 1690, 1695, 1698, 1703, 1708, 1710, 1667, 1650, 1663,
     1658, 1677, 1586, 1533, 1666, 1496, 1476, 1466, 1463, 1458,
     1442, 1409,  808, 1752, 1741, 1729, 1743, 1745, 1777, 1779,
     1781, 1783, 1785, 1787, 1789, 1792, 1795, 1797, 1800, 1803,
     1806, 1811, 1817, 1809, 1813, 1819, 1525, 1721, 1797, 1634,
     1649, 1813, 1877, 1659, 1893, 1715, 1897, 1961,  717, 1787,
     1825, 1875, 1827, 1826, 1877, 1973, 2047, 2049, 2051, 2053,
     2056,  748, 2058, 2060, 2068, 2073, 2075, 2078, 2080, 2082,
     2085, 2089, 2093, 2095, 2097, 1721, 1801, 1985, 2072, 2084,
     2148, 2160, 2065, 2224, 2200, 2264, 2256, 2320, 2320, 2384,

     2384, 2448, 2514, 2516, 2106, 2284, 2518,  742, 2520, 2523,
     2525, 2527, 2535, 2537, 2545, 2547,  646,  638,  609,  601,
      593,  580, 2426,  575,  568,  549,  534,  492,  479,  452,
      449, 2556, 2553, 2549,  508, 2558, 2560, 2562, 2577,  509,
     2579, 2589, 2585, 2581,  499, 2583,  484, 2587, 2752, 2591,
      481,  472, 2598,  479,  466, 2600,  456,  451, 2593,  431,
      439, 2611,  435,  417, 2614,  408,  379,  367,  356,  339,
      311,  310,  213,  213,  213,  196,  197,  184,  170, 2752,
      146,  150, 2752, 2752, 2644, 2654, 2664, 2674, 2684,  171,
      162, 2687,  148, 2689,  146, 2695, 2697, 2706, 2716, 2725,

     2735,  135, 2738, 2740, 2742
    } ;

static const flex_int16_t yy_def[606] =
    {   0,
      584,    1,  585,  585,  586,  586,  587,  587,  585,  585,
      588,  588,  589,  589,  585,  585,  585,  585,  585,  585,
      585,  585,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  590,  584,  584,  584,  584,
      584,  591,  584,  584,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  584,  584,  584,  584,  592,  592,  584,  592,  593,
      594,  594,  595,  596,  597,  584,  584,  598,  584,  599,
      584,  584,  584,  584,  584,  584,  584,  600,  584,  584,
      601,  584,  584,  584,  584,  602,  602,  591,  584,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  584,  584,  584,  584,  584,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  603,  603,  604,  605,  598,  584,  599,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  600,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  592,  584,  584,  584,
      584,  584,  584,  592,  592,  584,  584,  592,  592,  592,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  591,  591,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  591,  591,  591,
      591,  584,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  584,  584,  584,  584,  584,
      584,  584,  584,  492,  584,  584,  584,  584,  584,  584,

      584,  584,  584,  591,  591,  591,  591,  584,  591,  591,
      591,  591,  591,  591,  591,  591,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  591,  591,  584,  591,  591,  591,  591,  584,
      591,  584,  591,  591,  584,  591,  584,  591,  584,  591,
      584,  584,  591,  584,  584,  591,  584,  584,  591,  584,
      584,  591,  584,  584,  591,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,    0,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,

      584,  584,  584,  584,  584
    } ;

static const flex_int16_t yy_nxt[2885] =
    {   0,
       24,   25,   26,   27,   28,   29,   28,   30,   31,   32,
       33,   34,   35,   36,   36,   37,   38,   39,   40,   41,
       28,   42,   42,   42,   43,   28,   44,   28,   45,   46,
       47,   48,   49,   50,   42,   42,   51,   42,   52,   53,
       54,   42,   55,   56,   57,   58,   59,   60,   61,   42,
       42,   42,   62,   63,   64,   65,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   81,   81,   85,   85,   89,   89,   97,   90,
       90,   92,   92,   92,   92,   95,   95,   95,   95,   96,
       96,   97,   97,  152,   82,   82,  140,   86,   86,   91,
       91,   97,   97,   97,   97,   98,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,  102,  583,  104,   97,   97,  100,   97,   97,  123,
      582,  105,  119,  101,  103,  336,  106,  107,  108,  109,

       97,   97,  110,  112,  113,  114,  581,  120,  111,   97,
       97,  115,  121,   97,   97,  116,  580,  122,  136,  117,
       97,   97,  137,  337,   97,   97,  193,  194,  118,   97,
       97,   95,   95,   96,   96,  128,  579,  124,  125,  132,
      578,  126,  127,  129,  133,  577,   92,  131,   92,  576,
      130,  134,   97,   97,   97,   97,  575,   83,   83,   87,
       87,   97,   97,  237,  238,  237,  238,   93,   93,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  135,  138,  138,  138,  138,  138,  138,
      138,  135,  135,  135,  135,  135,  135,  135,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,   97,   97,   97,   97,   97,   97,  574,
      139,   97,   97,  573,  139,  139,  142,  143,  144,  338,
      145,  339,  146,  147,  148,  149,  197,  150,  196,  244,
      245,  572,   93,   97,   97,   97,   97,  198,  199,   97,
       97,  139,  139,  571,  200,  138,  139,  151,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,

      156,  156,  156,  156,  163,  201,  203,   97,   97,  206,
      570,  164,  165,   97,   97,   97,   97,   97,   97,   97,
       97,  166,  202,  167,  569,  180,  168,  169,  252,  181,
      253,  170,  254,  205,   97,   97,  182,  183,  171,   97,
       97,  172,  204,  173,  166,  174,  207,  175,  184,  208,
      568,  185,  186,  567,   97,   97,  187,   97,   97,   97,
       97,  209,  566,  188,   97,   97,  189,  213,  190,  564,
      191,  210,  192,  211,   97,   97,  563,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,  561,   97,   97,
       97,   97,  560,  212,   97,   97,   97,   97,   97,   97,

      214,  215,  216,  221,  558,  239,  223,  217,  219,  557,
      220,  226,  218,  224,  555,   97,   97,  554,  222,   97,
       97,   97,   97,  552,  225,  176,  340,  228,  341,   97,
       97,  255,  256,  227,  229,  242,  243,  551,  230,  265,
      266,  283,  165,  165,  165,  547,  231,  232,  233,  234,
      545,  235,  236,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  287,  288,  289,  290,  290,  290,  257,   97,
       97,  240,  258,  259,   97,   97,   97,   97,  423,  241,
      246,  423,  260,  261,  262,  263,   97,   97,  247,  248,
      249,  246,  250,  294,  248,  249,  248,   97,   97,  246,

       92,  293,   92,  246,  246,  248,  249,  246,  422,   97,
       97,   97,   97,  340,  246,  341,   97,   97,  249,   97,
       97,  422,  248,  249,  297,  247,  248,  248,  300,  248,
      247,  268,  269,  270,  271,  272,  273,  274,  284,  284,
      299,  275,  276,  277,  278,  309,  284,   97,   97,   97,
       97,  285,  285,  284,  284,  284,  284,  284,  284,  285,
       97,   97,  298,  421,  291,  291,  285,  285,  285,  285,
      285,  285,  291,   97,   97,  303,   97,   97,  421,  291,
      291,  291,  291,  291,  291,   92,   92,   92,   92,   92,
       92,   92,   92,   92,  295,   97,   97,  420,   97,   97,

       97,   97,   97,   97,  420,  301,   97,   97,  296,  418,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,  418,  302,  304,  307,   93,  306,  305,  308,
      417,  310,   97,   97,   97,   97,   97,   97,  417,  311,
       97,   97,   97,   97,  312,   97,   97,   97,   97,   97,
       97,  313,   97,   97,  314,  315,   97,   97,  342,  317,
      343,  322,   97,   97,  324,  319,  316,  416,  325,  318,
      323,  320,  321,   97,   97,  416,  327,   97,   97,   97,
       97,  535,   97,   97,  508,   97,   97,  344,  326,  345,
      489,  328,  366,  165,  369,  370,  371,  290,  290,  290,

       97,   97,  331,  329,   97,   97,   97,   97,  330,  332,
      333,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  373,  334,
      334,  334,  334,  334,  334,  334,   97,   97,  377,   97,
       97,   97,   97,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  367,  367,
       97,   97,   97,   97,  383,  335,  367,   97,   97,  335,
      335,  368,  368,  367,  367,  367,  367,  367,  367,  368,
       97,   97,  374,  378,  466,  375,  368,  368,  368,  368,

      368,  368,   97,   97,   97,   97,  335,  335,  237,  238,
      334,  335,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      250,  250,  250,  250,  250,  250,  250,  135,  250,  250,

      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  248,  135,
      248,  135,  135,  135,  248,  135,  135,  248,  248,  135,
      135,  248,  248,  248,  248,  135,  248,  248,  248,  248,
      248,  248,  248,  248,  247,  247,  247,  247,  135,  247,

      135,  247,  247,  247,  247,  247,  247,  247,  135,  247,
      247,  247,  247,  135,  247,  247,  247,  247,  247,  247,
      351,  351,  351,  352,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  249,  249,  135,  249,  249,  249,  249,  135,
      135,  249,  249,  249,  249,  249,  249,  249,  249,  135,
      249,  249,  249,  249,  249,  249,  249,  135,  354,  354,

      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  246,  246,  135,  246,  246,  246,
      246,  135,  246,  246,  246,  246,  246,  135,  246,  135,
      135,  135,  246,  246,  246,  246,  246,  246,  246,  135,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,

      356,  356,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  135,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  135,
      359,  359,  359,  359,  359,  359,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,

      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  135,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  135,  361,  361,
      361,  361,  361,  361,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  135,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  465,  363,  363,  363,  363,

      363,  363,  372,  372,   97,   97,   97,   97,   97,   97,
      372,   97,   97,   97,   97,   97,   97,  372,  372,  372,
      372,  372,  372,   97,   97,   97,   97,  376,  464,   97,
       97,   97,   97,  379,   97,   97,   97,   97,   97,   97,
      382,  381,   97,   97,  463,  380,   97,   97,  385,  462,
      386,  388,  461,  384,  387,  390,   97,   97,  344,  389,
      345,  392,  460,  393,   97,   97,   97,   97,   97,   97,
      391,   97,   97,  394,   97,   97,   97,   97,   97,   97,
       97,   97,  459,  395,   97,   97,  397,   97,   97,   97,
       97,   97,   97,  399,   97,   97,  237,  238,  396,  402,

      165,  165,  403,  398,  456,  400,  405,  406,  404,  340,
      342,  419,  343,  407,  338,  401,  339,  424,  424,  290,
      290,   97,   97,   97,   97,  424,   97,   97,   97,   97,
       97,   97,  424,  424,  424,  424,  424,  424,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,  338,  427,  339,  426,   97,   97,  425,   97,
       97,   97,   97,  455,  429,   97,   97,  423,  428,  431,
       97,   97,  423,  430,  432,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,  433,  422,   97,

       97,  422,  434,   97,   97,  435,  421,  440,   97,   97,
      439,   97,   97,  436,  441,  437,   97,   97,  421,  438,
      442,   97,   97,   97,   97,  443,  447,  448,  449,  444,
      450,  451,  445,  452,  453,  420,  451,  447,  451,  457,
      458,  420,   97,   97,  418,  447,  454,  451,  446,  447,
      447,  454,  418,  447,   97,   97,   97,   97,   97,   97,
      447,  340,  454,  341,  451,  467,  467,  450,  451,  451,
      417,  451,  450,  467,  454,  469,  340,  468,  341,  454,
      467,  467,  467,  467,  467,  467,  342,  470,  343,  471,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,

       97,   97,   97,   97,  472,   97,   97,  473,   97,   97,
       97,   97,  474,   97,   97,  475,   97,   97,  417,   97,
       97,  477,   97,   97,   97,   97,   97,   97,  476,  479,
       97,   97,   97,   97,  447,  447,  416,  447,  447,  447,
      447,  478,  344,  416,  345,  480,  481,  482,  338,  483,
      339,  484,  415,  485,  447,  447,  447,  447,  447,  414,
      447,  490,  491,  413,  447,  447,  447,  447,  447,  447,
      447,  412,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  451,  411,

      451,  492,  493,  410,  451,  495,  496,  451,  451,  497,
      498,  451,  451,  451,  451,  409,  451,  451,  451,  451,
      451,  451,  451,  451,  450,  450,  450,  450,  342,  450,
      343,  450,  450,  450,  450,  450,  450,  450,  408,  450,
      450,  450,  450,  365,  450,  450,  450,  450,  450,  450,
      452,  494,  493,  451,  454,  454,  364,  454,  454,  454,
      454,  499,  500,  454,  454,  454,  454,  454,  454,  454,
      454,  292,  454,  454,  454,  454,  454,  454,  454,   92,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  487,  487,  487,  487,  487,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  456,  456,  456,  456,  456,  456,  456,  286,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  501,  502,
      503,  503,   97,   97,   97,   97,   97,   97,  503,   97,
       97,   97,   97,   97,   97,  503,  503,  503,  503,  503,
      503,   97,   97,  505,  282,  506,   97,   97,   97,   97,
      504,   97,   97,   97,   97,   97,   97,  281,   97,   97,

      160,  507,   97,   97,  158,  509,   97,   97,   97,   97,
       97,   97,  344,  264,  345,  510,  514,  515,  512,   97,
       97,  511,  522,  522,  522,  522,  251,  516,  513,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,

      519,  519,  519,  519,  519,  519,  519,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  450,  450,  450,  450,  195,  450,  450,  450,  450,
       94,  450,  450,  450,  450,  450,  450,   97,   97,  177,

      523,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  162,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,

      527,  527,  527,  527,  161,  527,  527,  527,  527,  527,
      527,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  160,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  158,  529,  529,  529,  529,  529,  529,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  154,  531,  531,  531,  531,  531,

      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
       99,  531,  531,  531,  531,  531,  531,  532,  532,   97,
       97,   97,   97,   97,   97,  532,   97,   97,   97,   97,
       97,   97,  532,  532,  532,  532,  532,  532,   97,   97,
       97,   97,  536,  340,  534,  419,  533,  538,   97,   97,
       97,   97,   97,   97,  540,   94,   97,   97,  537,  542,
      542,   97,   97,   97,   97,   97,   97,  542,  584,  544,
      539,  543,   79,  541,  542,  542,  542,  542,  542,  542,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,

       97,   97,  549,  549,   97,   97,   97,   97,   79,  546,
      549,   97,   97,   97,   97,  548,  584,  549,  549,  549,
      549,  549,  549,  550,   97,   97,  556,   97,   97,  559,
      584,  562,  584,  584,  584,  584,  584,  584,  553,  584,
      584,  584,  584,  565,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,  135,  135,  141,  141,  153,  153,

      153,  153,  153,  153,  155,  155,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  159,  584,  159,  159,
      159,  584,  159,  159,  159,  178,  584,  584,  178,  178,
      178,  584,  178,  178,  178,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  267,  267,  279,  279,  280,
      280,   23,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,

      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584
    } ;

static const flex_int16_t yy_chk[2885] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    7,    8,   11,   12,   13,   14,  602,   13,
       14,   25,   27,   25,   27,   32,   32,   34,   34,   36,
       36,   42,   42,  595,    7,    8,  593,   11,   12,   13,
       14,   45,   45,   46,   46,  591,   47,   47,   48,   48,
       56,   56,   49,   49,  590,   50,   50,   53,   53,   54,
       54,   47,  582,   48,   51,   51,   45,   55,   55,   56,
      581,   48,   53,   46,   47,  240,   48,   49,   49,   49,

       52,   52,   49,   50,   51,   51,  579,   54,   49,   57,
       57,   51,   54,   58,   58,   52,  578,   55,   66,   52,
       59,   59,   66,  240,   60,   60,   93,   93,   52,   61,
       61,   95,   95,   96,   96,   58,  577,   57,   57,   60,
      576,   57,   57,   58,   61,  575,   92,   59,   92,  574,
       58,   61,   98,   98,  106,  106,  573,    7,    8,   11,
       12,  113,  113,  138,  138,  139,  139,   25,   27,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,  100,  100,  102,  102,  101,  101,  572,
       69,  103,  103,  571,   69,   69,   72,   72,   72,  246,
       72,  246,   72,   72,   72,   72,  101,   72,  100,  144,
      144,  570,   92,  104,  104,  107,  107,  102,  103,  110,
      110,   69,   69,  569,  103,   69,   69,   72,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   86,  104,  107,  105,  105,  110,
      568,   86,   86,  108,  108,  109,  109,  111,  111,  112,
      112,   86,  105,   86,  567,   91,   86,   86,  147,   91,
      147,   86,  147,  109,  114,  114,   91,   91,   86,  118,
      118,   86,  108,   86,   86,   86,  111,   86,   91,  112,
      566,   91,   91,  564,  115,  115,   91,  116,  116,  117,
      117,  114,  563,   91,  119,  119,   91,  118,   91,  561,
       91,  115,   91,  116,  120,  120,  560,  121,  121,  122,
      122,  123,  123,  124,  124,  125,  125,  558,  126,  126,
      127,  127,  557,  117,  128,  128,  129,  129,  130,  130,

      119,  120,  121,  126,  555,  143,  127,  122,  124,  554,
      125,  129,  123,  128,  552,  131,  131,  551,  126,  132,
      132,  133,  133,  547,  128,   86,  247,  130,  247,  134,
      134,  148,  148,  129,  131,  143,  143,  545,  131,  151,
      151,  164,  164,  165,  165,  540,  131,  131,  131,  132,
      535,  133,  134,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  177,  177,  182,  182,  183,  183,  149,  196,
      196,  142,  149,  149,  205,  205,  198,  198,  531,  142,
      145,  530,  149,  149,  149,  149,  197,  197,  145,  145,
      145,  145,  145,  198,  145,  145,  145,  200,  200,  145,

      239,  197,  239,  145,  145,  145,  145,  145,  529,  203,
      203,  214,  214,  248,  145,  248,  213,  213,  145,  202,
      202,  528,  145,  145,  200,  145,  145,  145,  203,  145,
      145,  154,  154,  154,  154,  154,  154,  154,  166,  166,
      202,  154,  154,  154,  154,  213,  166,  201,  201,  227,
      227,  175,  175,  166,  166,  166,  166,  166,  166,  175,
      207,  207,  201,  527,  192,  192,  175,  175,  175,  175,
      175,  175,  192,  204,  204,  207,  199,  199,  526,  192,
      192,  192,  192,  192,  192,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  199,  206,  206,  525,  208,  208,

      209,  209,  210,  210,  524,  204,  211,  211,  199,  522,
      212,  212,  215,  215,  216,  216,  217,  217,  218,  218,
      219,  219,  521,  206,  208,  211,  239,  210,  209,  212,
      520,  215,  220,  220,  221,  221,  222,  222,  519,  216,
      223,  223,  225,  225,  217,  224,  224,  226,  226,  228,
      228,  218,  229,  229,  219,  220,  230,  230,  249,  222,
      249,  225,  231,  231,  226,  223,  221,  518,  228,  222,
      225,  223,  224,  232,  232,  517,  230,  233,  233,  234,
      234,  508,  235,  235,  472,  236,  236,  250,  229,  250,
      459,  231,  283,  283,  286,  286,  289,  289,  290,  290,

      300,  300,  234,  232,  293,  293,  297,  297,  233,  235,
      236,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  293,  237,
      237,  237,  237,  237,  237,  237,  309,  309,  297,  310,
      310,  304,  304,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  284,  284,
      294,  294,  295,  295,  304,  238,  284,  298,  298,  238,
      238,  285,  285,  284,  284,  284,  284,  284,  284,  285,
      311,  311,  294,  298,  423,  295,  285,  285,  285,  285,

      285,  285,  321,  321,  325,  325,  238,  238,  334,  334,
      238,  238,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,

      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,

      270,  270,  270,  270,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,

      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  422,  278,  278,  278,  278,

      278,  278,  291,  291,  296,  296,  299,  299,  301,  301,
      291,  302,  302,  303,  303,  306,  306,  291,  291,  291,
      291,  291,  291,  305,  305,  307,  307,  296,  421,  308,
      308,  312,  312,  299,  313,  313,  314,  314,  315,  315,
      303,  302,  316,  316,  420,  301,  317,  317,  306,  419,
      307,  312,  418,  305,  308,  314,  318,  318,  348,  313,
      348,  316,  417,  317,  319,  319,  320,  320,  323,  323,
      315,  322,  322,  318,  324,  324,  326,  326,  327,  327,
      328,  328,  416,  319,  332,  332,  322,  329,  329,  330,
      330,  331,  331,  324,  333,  333,  335,  335,  320,  328,

      366,  366,  329,  323,  414,  326,  331,  332,  330,  352,
      354,  352,  354,  333,  355,  327,  355,  367,  367,  371,
      371,  373,  373,  374,  374,  367,  375,  375,  376,  376,
      377,  377,  367,  367,  367,  367,  367,  367,  378,  378,
      379,  379,  380,  380,  381,  381,  382,  382,  383,  383,
      384,  384,  447,  378,  447,  376,  385,  385,  375,  386,
      386,  387,  387,  413,  382,  388,  388,  363,  379,  384,
      389,  389,  362,  383,  385,  390,  390,  391,  391,  392,
      392,  393,  393,  394,  394,  395,  395,  396,  396,  397,
      397,  398,  398,  399,  399,  401,  401,  388,  361,  400,

      400,  360,  389,  402,  402,  392,  359,  397,  403,  403,
      396,  404,  404,  393,  400,  394,  405,  405,  358,  395,
      402,  406,  406,  407,  407,  403,  408,  409,  409,  404,
      410,  410,  405,  411,  411,  357,  410,  408,  410,  415,
      415,  356,  426,  426,  353,  408,  412,  410,  406,  408,
      408,  412,  351,  408,  425,  425,  427,  427,  428,  428,
      408,  450,  412,  450,  410,  424,  424,  410,  410,  410,
      350,  410,  410,  424,  412,  426,  451,  425,  451,  412,
      424,  424,  424,  424,  424,  424,  454,  427,  454,  428,
      429,  429,  430,  430,  431,  431,  432,  432,  433,  433,

      434,  434,  435,  435,  429,  436,  436,  430,  437,  437,
      438,  438,  431,  439,  439,  432,  440,  440,  349,  441,
      441,  435,  444,  444,  442,  442,  445,  445,  433,  438,
      443,  443,  446,  446,  448,  448,  347,  448,  448,  448,
      448,  437,  456,  346,  456,  439,  441,  442,  486,  443,
      486,  445,  345,  446,  449,  449,  449,  449,  449,  344,
      449,  460,  460,  343,  449,  449,  449,  449,  449,  449,
      449,  342,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  452,  341,

      452,  461,  461,  340,  452,  463,  463,  452,  452,  464,
      464,  452,  452,  452,  452,  339,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  487,  452,
      487,  452,  452,  452,  453,  453,  453,  453,  338,  453,
      453,  453,  453,  282,  453,  453,  453,  453,  453,  453,
      462,  462,  462,  453,  455,  455,  281,  455,  455,  455,
      455,  465,  465,  455,  455,  455,  455,  455,  455,  455,
      455,  195,  455,  455,  455,  455,  455,  455,  455,  194,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  176,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  466,  466,
      467,  467,  468,  468,  469,  469,  470,  470,  467,  471,
      471,  473,  473,  474,  474,  467,  467,  467,  467,  467,
      467,  475,  475,  469,  162,  470,  476,  476,  477,  477,
      468,  478,  478,  479,  479,  480,  480,  161,  481,  481,

      160,  471,  482,  482,  157,  476,  483,  483,  484,  484,
      485,  485,  488,  150,  488,  477,  481,  482,  479,  505,
      505,  478,  493,  493,  493,  493,  146,  484,  480,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,

      490,  490,  490,  490,  490,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  494,  494,  494,  494,   99,  494,  494,  494,  494,
       94,  494,  494,  494,  494,  494,  494,  506,  506,   87,

      494,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  498,   83,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,

      498,  498,  498,  498,   82,  498,  498,  498,  498,  498,
      498,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,   81,  499,  499,  499,
      499,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,   78,  500,  500,  500,  500,  500,  500,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,   74,  501,  501,  501,  501,  501,

      501,  501,  501,  501,  501,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
       43,  502,  502,  502,  502,  502,  502,  503,  503,  504,
      504,  507,  507,  509,  509,  503,  510,  510,  511,  511,
      512,  512,  503,  503,  503,  503,  503,  503,  513,  513,
      514,  514,  509,  523,  507,  523,  504,  511,  515,  515,
      516,  516,  534,  534,  514,   26,  533,  533,  510,  532,
      532,  536,  536,  537,  537,  538,  538,  532,   23,  534,
      513,  533,    6,  515,  532,  532,  532,  532,  532,  532,
      539,  539,  541,  541,  544,  544,  546,  546,  543,  543,

      548,  548,  542,  542,  550,  550,  559,  559,    5,  539,
      542,  553,  553,  556,  556,  541,    0,  542,  542,  542,
      542,  542,  542,  543,  562,  562,  553,  565,  565,  556,
        0,  559,    0,    0,    0,    0,    0,    0,  548,    0,
        0,    0,    0,  562,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  592,  592,  594,  594,  596,  596,

      596,  596,  596,  596,  597,  597,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  599,    0,  599,  599,
      599,    0,  599,  599,  599,  600,    0,    0,  600,  600,
      600,    0,  600,  600,  600,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  603,  603,  604,  604,  605,
      605,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,

      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../mli-root/src/directive-lexer.ll"
/* Copyright (C) 2017, 2021 Hans Åberg.

   This file is part of MLI, MetaLogic Inference.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
#line 19 "../../mli-root/src/directive-lexer.ll"

#include "directive-parser.hh"

#include <iostream>
#include <fstream>
#include <locale>
#include <set>
#include <stack>
#include <string>
#include <sstream>
#include <vector>

#include "proposition.hh"
#include "basictype.hh"


#define YYERRCODE	256

#define the_text std::string(yytext, yyleng)
#define get_text yylval.text = std::string(yytext, yyleng)

int directive_comment_level = 0;
bool directive_declaration_context = false;
mli::directive_parser::token_type directive_declared_token = mli::free_variable_context;
int directive_declared_type = 0;

int directive_current_token = 0;

extern std::istream::pos_type current_position, line_position;

std::vector<std::string> directive_strs;
mli::kleenean directive_directive_type = false;

#line 1312 "../../mli-root/src/directive-lexer.cc"

/*
whitespace
" " U+2002 en space
" " U+2003 em space
" " U+2004 three-per-em space
" " U+2005 four-per-em space
" " U+2006 six-per-em space
" " U+2007 figure space
" " U+2008 punctuation space
" " U+2009 thin space
" " U+200A hair space
" " U+205F medium mathematical space
*/
/* UTF-8 character with valid Unicode code point. */
#line 179 "../../mli-root/src/directive-lexer.ll"
#define YY_USER_ACTION  yylloc.columns(yyleng); current_position += yyleng;
#line 1330 "../../mli-root/src/directive-lexer.cc"
#line 1331 "../../mli-root/src/directive-lexer.cc"

#define INITIAL 0
#define comment 1
#define line_comment 2
#define block_comment 3
#define directive 4
#define any_identifier 5
#define C_string 6
#define find_set_variable 7
#define find_vertical_line 8
#define include_file 9
#define logic_prefix 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 183 "../../mli-root/src/directive-lexer.ll"


#line 186 "../../mli-root/src/directive-lexer.ll"
  mli::semantic_type& yylval = *yylvalp;
  mli::location_type& yylloc = *yyllocp;

  if (directive_current_token != 0) { int tok = directive_current_token; directive_current_token = 0; return tok; }

  yylloc.step();


#line 1485 "../../mli-root/src/directive-lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 585 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2752 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 194 "../../mli-root/src/directive-lexer.ll"
{ yylloc.step(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 195 "../../mli-root/src/directive-lexer.ll"
{ yylloc.lines(yyleng); yylloc.step(); line_position = current_position; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 198 "../../mli-root/src/directive-lexer.ll"
{ expand_implicit_premise = true; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 199 "../../mli-root/src/directive-lexer.ll"
{ expand_implicit_premise = false; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 202 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::count_key; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 203 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::max_key; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 204 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::level_key; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 205 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::sublevel_key; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 208 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::diagnostic_key; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 209 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::ignored_key; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 210 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::warning_key; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 211 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::error_key; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 213 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::unused_key; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 214 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::variable_key; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 215 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::type_key; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 216 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::label_key; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 219 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::trace_key; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 220 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::untrace_key; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 223 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::conditional_key; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 224 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::strict_key; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 227 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::all_key; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 228 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::none_key; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 229 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::no_key; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 232 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::null_key; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 233 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::empty_key; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 234 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::result_key; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 235 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::proof_key; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 236 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::solve_key; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 237 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::prooftree_key; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 238 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::unify_key; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 239 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::split_key; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 240 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::substitute_key; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 241 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::statement_key; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 242 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::database_key; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 243 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::formula_key; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 244 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::unspecializable_key; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 245 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::structure_key; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 246 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::thread_key; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 249 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::include_key; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 250 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::end_key; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 253 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::implies_key; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 254 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::impliedby_key; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 255 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::equivalent_key; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 257 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::logical_and_key; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 258 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::logical_or_key; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 259 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::logical_not_key; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 261 "../../mli-root/src/directive-lexer.ll"
{ directive_declaration_context = false;
       directive_bound_variable_type = free_variable_context;
       return mli::directive_parser::token::colon_key; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 264 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::comma_key; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 265 "../../mli-root/src/directive-lexer.ll"
{ directive_declaration_context = false;
       directive_bound_variable_type = free_variable_context;
       return mli::directive_parser::token::period_key; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 269 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::semicolon_key; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 272 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::less_key; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 273 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::greater_key; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 274 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::less_or_equal_key; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 275 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::greater_or_equal_key; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 277 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::not_less_key; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 278 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::not_greater_key; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 279 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::not_less_or_equal_key; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 280 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::not_greater_or_equal_key; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 282 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::equal_key; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 283 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::not_equal_key; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 286 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::mapsto_key; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 288 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::degree_key; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 291 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::left_parenthesis_key; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 292 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::right_parenthesis_key; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 294 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::superscript_left_parenthesis_key; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 295 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::superscript_right_parenthesis_key; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 297 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::subscript_left_parenthesis_key; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 298 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::subscript_right_parenthesis_key; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 301 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::left_bracket_key; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 302 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::right_bracket_key; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 304 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::left_angle_bracket_key; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 305 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::right_angle_bracket_key; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 307 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::left_brace_key; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 308 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::vertical_line_key; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 309 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::right_brace_key; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 311 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::tilde_key; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 313 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::mult_key; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 314 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::plus_key; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 315 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::minus_key; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 317 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::if_key; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 318 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::then_key; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 319 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::else_key; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 321 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::while_key; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 322 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::do_key; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 323 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::loop_key; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 324 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::for_key; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 326 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::break_key; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 327 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::continue_key; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 329 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::throw_key; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 330 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::try_key; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 331 "../../mli-root/src/directive-lexer.ll"
{ return mli::directive_parser::token::catch_key; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 334 "../../mli-root/src/directive-lexer.ll"
{
  get_text;
  yylval.object = ref<integer>(mli::make, yytext);
  return mli::directive_parser::token::natural_number_value;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 340 "../../mli-root/src/directive-lexer.ll"
{
  get_text;
  yylval.object = ref<integer>(make, yytext);
  return mli::directive_parser::token::integer_value;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 349 "../../mli-root/src/directive-lexer.ll"
{
  get_text;

  directive_parser::token_type ret = directive_define_variable(yylval);

  return ret;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 358 "../../mli-root/src/directive-lexer.ll"
{ get_text; return mli::directive_parser::token::label_key; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 361 "../../mli-root/src/directive-lexer.ll"
{ yylval.text.clear(); BEGIN(any_identifier); }
	YY_BREAK

case 97:
YY_RULE_SETUP
#line 364 "../../mli-root/src/directive-lexer.ll"
{ /* Closing quote - all done. Text now in yylval.text. */
    BEGIN(INITIAL);

    directive_parser::token_type ret = directive_define_variable(yylval);


    return ret;
  }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 373 "../../mli-root/src/directive-lexer.ll"
{
    BEGIN(INITIAL);
    throw mli::directive_parser::syntax_error(yylloc,
     "String with “; an earlier string might be unterminated.");
  }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 378 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += "“"; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 379 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += "”"; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 381 "../../mli-root/src/directive-lexer.ll"
{ /* Octal escape sequence. */
	  int result;
	  std::sscanf(yytext + 1, "%o", &result);
	  if (result > 0xff) {
      BEGIN(INITIAL);
      throw mli::directive_parser::syntax_error(yylloc,
        "String octal escape " + the_text + " is out-of-bounds, must be ≤ \\ 377.");
    }
	  yylval.text += (char)result;
	}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 392 "../../mli-root/src/directive-lexer.ll"
{ /* Hexadecimal escape sequence. */
	  int result;
	  std::sscanf(yytext + 2, "%x", &result);
	  if (result > 0xff) {
      // Can actually not get here, as scanning for max 2 hex digits!
      BEGIN(INITIAL);
      throw mli::directive_parser::syntax_error(yylloc,
        "String hexadecimal escape " + the_text + " is out-of-bounds, must be ≤ \\xff.");
    }
	  yylval.text += (char)result;
	}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 404 "../../mli-root/src/directive-lexer.ll"
{ /* Hexadecimal escape sequence to give UTF-8 characters. */
    yylval.text += to_utf8(std::stoul(yytext + 2, nullptr, 16));
	}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 408 "../../mli-root/src/directive-lexer.ll"
{
    BEGIN(INITIAL);
    throw mli::directive_parser::syntax_error(yylloc,
      "Bad string escape sequence " + the_text);
  }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 414 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += '\\'; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 415 "../../mli-root/src/directive-lexer.ll"
{ ; /* Non-character, used to delimit numeric escapes */ }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 417 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += '\a'; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 418 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += '\b'; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 419 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += '\f'; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 420 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += '\n'; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 421 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += '\r'; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 422 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += '\t'; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 423 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += '\v'; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 425 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += the_text; }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 426 "../../mli-root/src/directive-lexer.ll"
{
    BEGIN(INITIAL); yylloc.lines(yyleng); yylloc.step(); line_position = current_position;
    throw mli::directive_parser::syntax_error(yylloc, "Newline in string.");
  }
	YY_BREAK

case 116:
YY_RULE_SETUP
#line 434 "../../mli-root/src/directive-lexer.ll"
{ BEGIN(line_comment); }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 436 "../../mli-root/src/directive-lexer.ll"
{ BEGIN(INITIAL); yylloc.lines(1); yylloc.step(); line_position = current_position; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 439 "../../mli-root/src/directive-lexer.ll"
{ BEGIN(block_comment); directive_comment_level = 1; }
	YY_BREAK
/* Block comments. */
case 119:
YY_RULE_SETUP
#line 442 "../../mli-root/src/directive-lexer.ll"
{ /* End of the comment. */
    if (--directive_comment_level == 0) {
      BEGIN INITIAL;
    }
  }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 448 "../../mli-root/src/directive-lexer.ll"
{ directive_comment_level++; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 449 "../../mli-root/src/directive-lexer.ll"
{}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 450 "../../mli-root/src/directive-lexer.ll"
{ yylloc.lines(yyleng); yylloc.step(); line_position = current_position; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 451 "../../mli-root/src/directive-lexer.ll"
{ /* Stray characters ignored, including — and [. */ }
	YY_BREAK
case YY_STATE_EOF(block_comment):
#line 453 "../../mli-root/src/directive-lexer.ll"
{
    BEGIN(INITIAL);
    throw mli::directive_parser::syntax_error(yylloc,
      "Nested comments not properly closed at end of directive.");
  }
	YY_BREAK

case 124:
YY_RULE_SETUP
#line 460 "../../mli-root/src/directive-lexer.ll"
{
  std::cout << "Dash" << std::endl;
  BEGIN(INITIAL);
  throw mli::directive_parser::syntax_error(yylloc, "No block comment open [— to match the close —].");
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 467 "../../mli-root/src/directive-lexer.ll"
{ yylval.text.clear(); BEGIN(C_string); }
	YY_BREAK

case 126:
YY_RULE_SETUP
#line 471 "../../mli-root/src/directive-lexer.ll"
{ /* Closing quote - all done. */ BEGIN(INITIAL); return mli::directive_parser::token::plain_name; }
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 472 "../../mli-root/src/directive-lexer.ll"
{
    BEGIN(INITIAL); yylloc.lines(yyleng); yylloc.step(); line_position = current_position;
    throw mli::directive_parser::syntax_error(yylloc, "Unterminated C-string.");
  }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 477 "../../mli-root/src/directive-lexer.ll"
{ /* Octal escape sequence. */
	  int result;
	  std::sscanf(yytext + 1, "%o", &result);
	  if (result > 0xff) {
      BEGIN(INITIAL);
      throw mli::directive_parser::syntax_error(yylloc,
        "String octal escape " + the_text + " is out-of-bounds, must be ≤ \\377.");
    }
	  yylval.text += (char)result;
	}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 488 "../../mli-root/src/directive-lexer.ll"
{ /* Hexadecimal escape sequence. */
	  int result;
	  std::sscanf(yytext + 2, "%x", &result);
	  if (result > 0xff) {
      BEGIN(INITIAL);
      throw mli::directive_parser::syntax_error(yylloc,
        "String hexadecimal escape " + the_text + " is out-of-bounds, must be ≤ \\xff.");
    }
	  yylval.text += (char)result;
	}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 499 "../../mli-root/src/directive-lexer.ll"
{
    BEGIN(INITIAL);
    throw mli::directive_parser::syntax_error(yylloc,
      "Bad string escape sequence " + the_text);
  }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 505 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += '\\'; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 506 "../../mli-root/src/directive-lexer.ll"
{ ; /* Non-character, used to delimit numeric escapes */ }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 508 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += '\a'; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 509 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += '\b'; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 510 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += '\f'; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 511 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += '\n'; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 512 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += '\r'; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 513 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += '\t'; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 514 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += '\v'; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 516 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += yytext[1]; }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 517 "../../mli-root/src/directive-lexer.ll"
{ yylval.text += yytext[1]; yylloc.lines(yyleng); yylloc.step(); line_position = current_position; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 518 "../../mli-root/src/directive-lexer.ll"
{ /* " */ yylval.text += the_text; }
	YY_BREAK

case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 522 "../../mli-root/src/directive-lexer.ll"
{ get_text;
  throw mli::directive_parser::syntax_error(yylloc, "invalid character \"" + yylval.text + "\""); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 525 "../../mli-root/src/directive-lexer.ll"
{ std::stringstream ss;
        ss << std::hex << std::uppercase << (unsigned)(unsigned char)yytext[0] << "ₓ";
        throw mli::directive_parser::syntax_error(yylloc, "invalid byte " + ss.str()); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 529 "../../mli-root/src/directive-lexer.ll"
{ return EOF; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(line_comment):
case YY_STATE_EOF(directive):
case YY_STATE_EOF(any_identifier):
case YY_STATE_EOF(C_string):
case YY_STATE_EOF(find_set_variable):
case YY_STATE_EOF(find_vertical_line):
case YY_STATE_EOF(include_file):
case YY_STATE_EOF(logic_prefix):
#line 531 "../../mli-root/src/directive-lexer.ll"
{ return EOF; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 533 "../../mli-root/src/directive-lexer.ll"
ECHO;
	YY_BREAK
#line 2399 "../../mli-root/src/directive-lexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 57);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 585 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 57;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 585 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 584);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 533 "../../mli-root/src/directive-lexer.ll"



