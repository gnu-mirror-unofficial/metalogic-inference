#line 1 "../../mli-root/src/database-lexer.cc"

#line 3 "../../mli-root/src/database-lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer mliFlexLexer

#ifdef yyalloc
#define mlialloc_ALREADY_DEFINED
#else
#define yyalloc mlialloc
#endif

#ifdef yyrealloc
#define mlirealloc_ALREADY_DEFINED
#else
#define yyrealloc mlirealloc
#endif

#ifdef yyfree
#define mlifree_ALREADY_DEFINED
#else
#define yyfree mlifree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int mli::database_lexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 207
#define YY_END_OF_BUFFER 208
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[755] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    4,    4,
        0,    0,  208,  206,    1,    2,    1,  122,  176,  205,
       85,   86,  124,   66,  125,   67,  120,  138,   65,   68,
       69,   77,   70,  144,  144,  144,   91,  121,   92,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,   95,   96,   97,   98,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  207,  207,  178,  182,  183,  184,  184,  164,
      165,  164,  164,  204,  189,  188,  207,  166,   99,  100,

      144,  166,  166,  166,  166,  104,  101,  102,  103,  104,
        5,    4,    5,  175,  168,  168,  170,  174,  172,  173,
      171,  169,  175,  175,  175,  175,  175,    1,    0,    2,
      139,  138,  145,  144,  144,  144,    0,  144,  144,  144,
      144,   21,  144,  144,  144,  130,  144,  144,  144,  144,
      144,  144,  126,   37,  144,  144,  144,  144,  144,   25,
      144,  144,  144,  144,  144,  144,  144,  144,  144,    0,
      205,   64,   82,  142,  167,  144,  144,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  178,  182,  183,

        0,    0,  156,  151,  154,    0,  155,  157,  158,  159,
      160,  161,  162,  163,    0,    0,    0,  204,  202,  203,
      194,  190,  192,  193,  195,  196,  197,  198,  199,  200,
      201,  202,   99,    0,  100,  144,  144,  144,    0,    0,
        0,    0,  101,    0,  102,    0,    0,    0,    5,    4,
        5,    0,  168,  169,  174,  174,    0,    0,    0,    0,
        0,    0,  106,  105,    0,   26,  144,  144,  144,  144,
      144,  144,  144,  144,  144,    7,  144,  132,  144,  144,
      144,  144,  144,  144,  144,   27,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  136,   38,  144,    0,    0,

        0,    0,    0,    1,  177,  146,   83,  205,   87,   88,
      140,  205,   89,   90,   84,  144,  144,  144,  144,  144,
       79,   60,   59,   61,   50,  110,   51,  107,  108,  109,
       20,  113,   62,   63,  112,  111,   39,   40,   41,   78,
       29,   30,   31,   71,   72,   73,   74,   75,   76,  116,
      118,  117,  119,   28,   24,  115,  114,  123,   93,   94,
       80,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  151,  153,  152,
        0,  148,  147,  190,  192,  191,    0,  146,  144,  144,
      144,  144,  144,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  103,    5,  174,  174,  174,  174,
      174,  172,  173,  171,  170,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  179,   56,  144,  144,
      144,   49,  144,  144,  144,  144,  144,  128,   33,  144,
      144,  144,  144,  144,  144,  131,  144,  144,  144,  144,
      144,  144,  144,  144,   12,  144,  127,  144,  144,  144,
      186,  142,    0,  185,  187,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,   81,  144,  144,  144,  144,  181,  180,  151,

      153,  152,  149,  150,  190,  191,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,    0,   11,  133,  137,  144,  144,  144,  144,
      144,  144,  144,    0,  144,  144,    3,   15,  144,  144,
      144,  144,  144,  144,   19,  144,  144,  144,  144,  135,
      129,  143,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   32,    0,    0,    0,    0,    0,    0,
        0,    0,  153,    0,  144,  144,  144,  144,  144,  144,

      144,    0,    0,  144,  144,  144,  144,   48,  144,  144,
      144,  144,   22,  144,  144,    9,  140,  141,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  153,    0,  144,  144,  144,  144,  144,
        0,   44,    0,   36,  144,    6,  144,  144,  144,  144,
       23,  144,   34,   17,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  153,    0,  144,   58,  134,  144,
      144,    0,    0,   35,   52,  144,  144,  144,  144,  144,
      153,    0,  144,   18,  144,    0,    0,    0,  144,  144,
       10,   53,  144,  153,    0,   13,   14,    0,    0,    0,

        0,  144,  144,    0,  144,  153,    0,    0,    0,    0,
        0,   42,  144,    0,    0,   16,    0,    0,    0,    0,
        0,  144,    0,    0,   46,    8,    0,    0,    0,   54,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   43,    0,    0,    0,    0,   57,   47,    0,
        0,   55,   45,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    7,    7,    8,    7,    9,
       10,    7,   11,   12,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   17,   17,   18,   19,   20,
       21,   22,   23,   23,   24,   25,   26,   25,   27,   25,
       28,   28,   28,   28,   29,   28,   28,   30,   28,   31,
       28,   28,   32,   28,   33,   28,   28,   28,   28,   28,
       34,   35,   36,   23,   23,   23,   37,   38,   39,   40,

       41,   42,   28,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   28,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
       99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
      109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
      119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
      129,    1,    1,  130,  131,  131,  132,  131,  131,  131,

      131,  131,  131,  133,  131,  134,  135,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  136,  137,  138,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  139,  137,  137,  140,
      141,  141,  141,  142,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[143] =
    {   0,
        1,    2,    3,    2,    1,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    5,    6,    6,    6,
        6,    6,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    8,    9,    6,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        6,    6,    6,    6,    6,   10,   10,   10,   10,   10,
       11,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   12,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,    1,
        1,    1,    1,    1,    1,    1,    1,   14,    1,    1,
        1,    1
    } ;

static const flex_int16_t yy_base[796] =
    {   0,
        0,    0,    0,    0, 3390, 3387,  140,  141,    0,    0,
      142,  143,  144,  145,  280,  419,  150,  153,  156,  161,
      558,  697, 3389, 5272,  164, 3383,  203, 5272, 5272, 5272,
     5272, 5272,  153, 5272,  155, 5272, 5272,  165, 5272, 5272,
     5272, 5272, 5272,  167,  169,  172, 3242, 5272, 5272,  174,
      177,  181,  184,  179,  205,  194,  200,  222,  235,  248,
      240,  231,  258,  192,  186,  251, 3231, 5272, 5272, 5272,
      232,    0, 3299,  772,  290,    0,    0,  314,    0, 3268,
        0,  358, 5272, 3353, 5272,    0, 3340, 3203, 3273, 5272,
     5272,  481, 3272,    0, 5272, 5272,  617, 5272,  258, 3329,

        0,  819,  437,  203, 3234, 5272,  343, 3323, 5272,  229,
        0,  295,  415, 5272,  348,  364, 5272, 5272, 5272, 5272,
     5272, 5272, 3215,  866,  692,  301, 3214,  390,  210, 3301,
      299,  327,    0,  337,  382,  386, 3237,  353,  437,  477,
      474,  384,  467,  525,  484,  390,  479,  527,  529,  515,
      531,  577,  396,  605,  533,  607,  612,  614,  547,  553,
      619,  621,  623,  631,  625,  634,  629,  644,  663, 3234,
     5272, 5272, 5272,   76, 5272,  441,  445,    0,    0,  714,
      698,  930,  948, 3192,  600, 1001,  998,  696,  626,  584,
     3218,    0,    0, 1032,    0,    0, 3281, 5272,    0, 3278,

     3212, 3191, 5272,  686,  688, 1105, 5272, 5272, 5272, 5272,
     5272, 5272, 5272, 5272, 1124, 3208,  614,    0, 5272, 5272,
     5272,  694,  696, 5272, 5272, 5272, 5272, 5272, 5272, 5272,
     5272, 1143,  525,  648, 3261,    0,  582,  584, 1103, 3157,
     1130, 1107,  789,  665, 3225, 1181, 3099, 3096,    0,  774,
      973, 3132,  795, 5272, 5272, 5272, 1190,  160,  665, 1227,
     1255, 3015,  785,  788, 2922,  812,  963,  916,  996, 1006,
     1032, 1001, 1003, 1020, 1061,  817, 1035, 1075, 1063, 1117,
     1141, 1170, 1187, 1211, 1202,  912, 1247, 1221, 1300, 1243,
     1262, 1316, 1319, 1321, 1078,  914, 1070, 1199, 2914, 1174,

     2932, 1289, 1353, 1133,  113, 5272, 5272,  162, 5272, 5272,
     2848, 2819, 5272, 5272, 5272,  245,  257,  342,  543,  654,
     5272, 5272, 5272, 5272, 5272, 5272, 5272, 5272, 5272, 5272,
     5272, 5272, 5272, 5272, 5272, 5272, 5272, 5272, 5272, 5272,
     5272, 5272, 2816, 5272, 5272, 5272, 5272, 5272, 5272, 5272,
     5272, 5272, 5272, 5272, 5272, 5272, 5272, 5272, 5272, 5272,
     5272,    0, 1407, 1471, 1535, 1599, 1663, 1727, 1791, 1783,
     1847, 1911, 1376,    0,    0, 2848, 2837, 1122, 1325, 2025,
     1058, 5272, 5272, 1138, 1213, 2031, 2006, 5272,  675,  836,
      950,  965, 1093, 2017, 2081, 2145, 2209, 2273, 2336, 2400,

     2392, 2456, 2520, 2584, 5272, 2862, 5272, 5272, 5272, 5272,
     5272, 5272, 5272, 5272, 5272, 2606, 2670, 2734, 2798, 2862,
     2925, 2989, 2981, 3045, 3109, 3173, 5272, 1343, 1352, 3259,
     3263, 3266, 3269, 3285, 3291, 3295, 3311, 3314, 3317, 3320,
     3342, 3345, 3348, 3351, 3368, 3371, 3375, 3379, 3395, 3399,
     3405, 3421, 3425, 3429, 3450, 3453, 3456, 3475, 3479, 3482,
     5272,  428, 3383, 5272, 5272, 1314, 2778, 2768, 2761, 2687,
     2570, 2569, 2512, 2511, 2454, 2453, 2324, 2286, 2257, 2228,
     1149, 2220, 2205, 2144, 1259, 2139, 1263, 1294, 2116, 2104,
     2100, 2028, 1921, 1325, 1317, 1289, 1262, 5272, 5272, 1282,

     3492, 5272, 5272, 5272, 1327, 5272, 1258, 1249, 1295, 1221,
     1213, 1199, 1326, 1194, 1905, 1906, 1166, 1162, 1155, 1146,
     1140, 1135, 1125, 1121, 5272, 5272, 5272, 5272, 5272, 5272,
     5272, 5272, 5272, 5272, 5272, 5272, 5272, 5272, 5272, 5272,
     5272, 5272, 3432, 3508, 3536, 3539, 3542, 3545, 3561, 3567,
     3571, 3587, 3590, 3594, 3609, 3614, 3625, 3641, 3644, 3647,
     3663, 3666, 3669, 3672, 3688, 3693, 3699, 3717, 3720, 3725,
     3728,  891, 3645, 3703, 3715, 3723, 1352, 3716, 1385, 3729,
     1156, 1154, 1971, 5272, 1125, 1116, 1110, 1101, 1041,  988,
      979,  974, 3820, 1023, 3839, 3847, 3850, 3866, 3869, 3736,

     3872, 1007,  998, 3875, 3895, 3898, 3914, 3917, 3924, 3940,
     3943, 3946, 3950, 3966, 3969, 3972,  900,  896, 3694, 3952,
     3968, 3931, 4028, 4032, 4096,  932, 1976, 2157, 2325, 2159,
     2158, 2257, 2737, 4186,  955, 4202, 4205, 4213, 4229, 4232,
     3518, 3976,  925, 5272, 4235, 4239, 4261, 4264, 4269, 4285,
     4289, 4294, 4310, 4313, 4284, 4296, 4360, 4372, 3533, 4392,
     4456, 4456, 4520, 4520, 4634,  875, 4650, 4316, 4319, 4653,
     4661,  776, 3747, 5272, 4677, 4680, 4683, 4688, 4704, 4714,
     4722,  793, 4738, 4749, 4765,  770,  768, 3511, 4768, 4771,
     4774, 4790, 4795, 4792,  743, 4819, 4822,  719,  681,  670,

      669, 4838, 4844, 3620, 4847, 5272,  621,  624,  602,  604,
      596, 4854, 4863,  593,  595, 4870,  586,  529,  530,  485,
      491, 4874,  468,  449, 5272, 5272,  450,  437,  451, 4881,
      431,  411,  403,  373,  341,  321,  335,  248,  222,  219,
      216,  211, 5272,  169,  179,  155,  152, 5272, 5272,  137,
      146, 5272, 5272, 5272, 4918, 4932, 4946, 4960, 4974, 4988,
     5002, 5016, 5030, 2264, 2828, 5035, 2827, 5039, 2929, 5048,
     5052, 5065, 5079, 5092, 5106,  166, 5120, 5134, 2853, 2991,
     5139, 5143, 5147, 5151, 5164, 5178, 5191,  154, 5205, 5219,
     5233, 3285, 5238, 5251, 5264

    } ;

static const flex_int16_t yy_def[796] =
    {   0,
      754,    1,  755,  755,  756,  756,  757,  757,  755,  755,
      758,  758,  759,  759,  760,  760,  761,  761,  762,  762,
      763,  763,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  764,  754,  754,
      754,  754,  754,  765,  765,  765,  754,  754,  754,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  754,  754,  754,  754,
      766,  766,  766,  754,  766,  767,  768,  768,  769,  770,
      771,  754,  754,  772,  754,  773,  754,  754,  754,  754,
      754,  754,  754,  774,  754,  754,  775,  754,  754,  754,

      776,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      777,  754,  778,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  779,  779,  780,  780,  780,  754,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  754,
      754,  754,  754,  754,  754,  754,  754,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  782,  782,  783,  784,  785,  754,  786,  754,

      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  787,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  788,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  789,  754,
      790,  791,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  792,  792,  754,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  754,  754,

      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  793,  754,  754,  754,  754,  754,  754,  793,  793,
      754,  754,  793,  793,  793,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,

      754,  754,  754,  754,  754,  794,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,

      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  754,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  795,  795,  795,  795,  795,  795,

      795,  754,  754,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  795,  795,  795,  795,  795,
      754,  795,  754,  754,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  795,  795,  795,  795,
      795,  754,  754,  754,  795,  795,  795,  795,  795,  795,
      754,  754,  795,  795,  795,  754,  754,  754,  795,  795,
      795,  795,  795,  754,  754,  795,  795,  754,  754,  754,

      754,  795,  795,  754,  795,  754,  754,  754,  754,  754,
      754,  795,  795,  754,  754,  795,  754,  754,  754,  754,
      754,  795,  754,  754,  754,  754,  754,  754,  754,  795,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,    0,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754

    } ;

static const flex_int16_t yy_nxt[5415] =
    {   0,
       24,   25,   26,   27,   28,   29,   30,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   38,   39,   40,   41,
       42,   43,   30,   44,   44,   44,   44,   44,   44,   44,
       45,   46,   44,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   44,   56,   44,   44,   57,   58,   59,   60,
       61,   44,   62,   63,   64,   65,   44,   66,   44,   44,
       67,   68,   69,   70,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   71,
       72,   73,   72,   74,   75,   76,   77,   78,   79,   80,
       81,   82,   87,   87,   91,   91,   95,   95,  464,   96,
       96,  107,  108,  107,  107,  108,  107,  112,  112,  112,
      236,  113,  112,  112,  112,  128,  113,  128,  131,  131,
      131,  131,  236,   88,   88,  465,   92,   92,   97,   97,
      132,  132,  133,  133,  133,  133,  753,  133,  133,  133,
      133,  752,  133,  133,  133,  133,  133,  133,  751,  133,

      133,  133,  133,  750,  128,  300,  128,  133,  133,  133,
      133,  109,  136,  301,  109,  133,  133,  143,  135,  749,
      133,  133,  138,  748,  145,  147,   83,  148,  139,  141,
      144,   83,  140,  146,  166,  153,  142,  133,  133,  168,
      155,  149,  154,  412,  167,  413,  133,  133,  747,  156,
      133,  133,  746,   83,  150,  133,  133,  151,   83,  233,
      152,  233,  157,  133,  133,  745,  133,  133,  239,  240,
      744,  163,  241,  133,  133,  261,  262,   89,   89,   93,
       93,   99,  100,   99,  158,  159,  164,  110,  743,  161,
      110,  466,  162,  169,  246,  247,  250,  250,  250,  467,

      160,  129,  248,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  165,  131,  131,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      129,  172,  132,  132,  243,  173,  243,  174,  174,  253,
      253,  253,  133,  133,  174,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  253,  253,  253,  133,  133,
      257,  742,  177,  258,  259,  741,  177,  177,  740,  180,
      181,  182,  470,  183,  471,  184,  185,  186,  187,  188,
      189,  128,  266,  128,  472,  234,  473,  133,  133,  133,

      133,  133,  133,  177,  177,  133,  133,  176,  177,  739,
      190,  133,  133,  102,  103,  191,  252,  104,  252,  105,
       99,  100,   99,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  263,
      264,  738,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  133,  133,  737,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  472,
      244,  473,  133,  133,  736,  252,  267,  735,  203,  133,
      133,  734,  133,  133,  133,  133,  204,  205,  733,  133,

      133,  732,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  252,  206,  269,  207,  731,  208,  209,  238,
      268,  270,  210,  238,  238,  274,  233,  129,  233,  211,
      133,  133,  275,  212,  729,  213,  206,  214,  728,  215,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      238,  238,  102,  103,  237,  238,  104,  300,  105,  115,
      116,  115,  133,  133,  271,  301,  276,  278,  133,  133,
      727,  279,  277,  272,  302,  303,  726,  273,  302,  303,
      283,  117,  118,  119,  120,  118,  121,  122,  118,  118,
      118,  287,  133,  133,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  216,  220,
      133,  133,  133,  133,  221,  280,  725,  133,  133,  133,
      133,  724,  222,  223,  133,  133,  133,  133,  133,  133,
      133,  133,  723,  281,  133,  133,  133,  133,  721,  133,
      133,  224,  720,  225,  226,  282,  284,  719,  227,  133,
      133,  289,  234,  293,  718,  228,  285,  717,  286,  229,
      290,  230,  288,  231,  294,  232,  291,  292,  133,  133,
      474,  322,  475,  323,  297,  324,  295,  123,  296,  359,
      360,  124,  125,  356,  357,  126,  358,  127,  115,  116,

      115,  378,  205,  205,  205,  711,  298,  382,  383,  384,
      385,  385,  385,  387,  240,  302,  303,  302,  303,  710,
      117,  118,  119,  120,  118,  121,  122,  118,  118,  118,
      246,  247,  709,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  350,  351,  414,
      415,  352,  353,  708,  256,  250,  250,  250,  256,  256,
      707,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      243,  476,  243,  477,  304,  354,  253,  253,  253,  305,

      133,  133,  355,  133,  133,  256,  256,  306,  699,  255,
      256,  174,  470,  307,  471,  174,  174,  174,  174,  174,
      174,  308,  308,  698,  309,  310,  123,  133,  133,  695,
      124,  125,  133,  133,  126,  686,  127,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  171,  176,  176,  176,  176,  176,  176,  176,  171,
      171,  171,  171,  171,  171,  171,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,

      177,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  682,  237,
      237,  237,  237,  237,  237,  237,  244,  133,  133,  133,
      133,  133,  133,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  429,  255,  255,  255,  255,
      255,  255,  255,  472,  252,  473,  252,  674,  133,  133,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  311,  311,  311,  311,  311,

      311,  311,  311,  311,  311,  312,  312,  666,  313,  314,
      428,  133,  133,  655,  315,  316,  133,  133,  133,  133,
      466,  133,  133,  317,  318,  319,  316,  320,  467,  318,
      319,  318,  430,  469,  316,  133,  133,  468,  316,  316,
      318,  319,  316,  252,  431,  433,  644,  133,  133,  316,
      133,  133,  436,  319,  434,  435,  643,  318,  319,  635,
      317,  318,  318,  437,  318,  317,  325,  326,  633,  327,
      252,  328,  432,  632,  329,  330,  133,  133,  133,  133,
      331,  439,  631,  337,  338,  133,  133,  472,  332,  473,
      133,  133,  339,  133,  133,  340,  341,  342,  343,  344,

      345,  438,  474,  441,  475,  333,  334,  335,  336,  346,
      347,  348,  349,  363,  364,  365,  366,  367,  368,  369,
      379,  379,  440,  370,  371,  372,  373,  459,  379,  379,
      379,  379,  133,  133,  128,  630,  128,  500,  205,  380,
      380,  379,  379,  379,  379,  379,  379,  380,  380,  380,
      380,  503,  504,  505,  385,  442,  133,  133,  386,  386,
      380,  380,  380,  380,  380,  380,  386,  386,  386,  386,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  386,
      386,  386,  386,  386,  386,  133,  133,  443,  394,  395,
      396,  397,  398,  399,  400,  629,  388,  389,  401,  402,

      403,  404,  133,  133,  628,  390,  391,  392,  389,  393,
      627,  391,  392,  391,  133,  133,  389,  133,  133,  626,
      389,  389,  391,  392,  389,  444,  133,  133,  385,  385,
      476,  389,  477,  393,  445,  392,  133,  133,  447,  391,
      392,  623,  390,  391,  391,  460,  391,  390,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  407,  133,  133,
      592,  446,  133,  133,  592,  408,  409,  410,  407,  411,
      129,  409,  410,  409,  591,  449,  407,  133,  133,  591,
      407,  407,  409,  410,  407,  590,  476,  448,  477,  462,
      462,  407,  452,  453,  590,  410,  462,  205,  205,  409,

      410,  589,  408,  409,  409,  589,  409,  408,  416,  417,
      418,  419,  420,  421,  422,  133,  133,  454,  423,  424,
      425,  426,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  133,  133,  587,  133,  133,  133,  133,  587,  450,
      501,  501,  385,  385,  543,  543,  543,  451,  501,  501,
      501,  501,  586,  754,  754,  754,  455,  456,  133,  133,
      586,  501,  501,  501,  501,  501,  501,  133,  133,  457,
      458,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  585,  237,
      237,  237,  237,  237,  237,  237,  472,  585,  588,  544,

      474,  592,  475,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  592,  572,
      572,  470,  476,  471,  477,  238,  572,  619,  620,  238,
      238,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  591,  497,  497,  497,
      497,  497,  497,  472,  591,  588,  238,  238,  621,  622,
      237,  238,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  480,  480,

      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      320,  320,  320,  320,  320,  320,  320,  171,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  318,  171,
      318,  171,  171,  171,  318,  171,  171,  318,  318,  171,
      171,  318,  318,  318,  318,  171,  318,  318,  318,  318,
      318,  318,  318,  318,  317,  317,  317,  317,  171,  317,
      171,  317,  317,  317,  317,  317,  317,  317,  171,  317,
      317,  317,  317,  171,  317,  317,  317,  317,  317,  317,
      484,  484,  484,  485,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,

      484,  484,  484,  484,  484,  484,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  319,  319,  171,  319,  319,  319,  319,  171,
      171,  319,  319,  319,  319,  319,  319,  319,  319,  171,
      319,  319,  319,  319,  319,  319,  319,  171,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  316,  316,  171,  316,  316,  316,
      316,  171,  316,  316,  316,  316,  316,  171,  316,  171,

      171,  171,  316,  316,  316,  316,  316,  316,  316,  171,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,

      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  171,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  493,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  171,
      492,  492,  492,  492,  492,  492,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  171,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  171,  495,  495,

      495,  495,  495,  495,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  171,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      502,  502,  474,  470,  475,  471,  506,  506,  502,  502,
      502,  502,  624,  625,  506,  506,  506,  506,  656,  657,
      590,  502,  502,  502,  502,  502,  502,  506,  506,  506,
      506,  506,  506,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,

      507,  507,  507,  507,  507,  507,  507,  507,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      393,  393,  393,  393,  393,  393,  393,  590,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,

      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  391,  590,
      391,  658,  659,  589,  391,  660,  400,  391,  391,  401,
      661,  391,  391,  391,  391,  589,  391,  391,  391,  391,
      391,  391,  391,  391,  390,  390,  390,  390,  133,  390,
      133,  390,  390,  390,  390,  390,  390,  390,  587,  390,
      390,  390,  390,  587,  390,  390,  390,  390,  390,  390,
      512,  512,  512,  513,  512,  512,  512,  512,  512,  512,

      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  392,  392,  586,  392,  392,  392,  392,  662,
      663,  392,  392,  392,  392,  392,  392,  392,  392,  586,
      392,  392,  392,  392,  392,  392,  392,  585,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  389,  389,  585,  389,  389,  389,

      389,  389,  389,  389,  389,  389,  584,  389,  621,  397,
      659,  389,  389,  389,  389,  389,  389,  389,  583,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  519,  519,  519,

      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  582,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  581,  520,
      520,  520,  520,  520,  520,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      580,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  579,  522,  522,  522,
      522,  522,  522,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  578,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  577,  524,  524,  524,  524,  524,
      524,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  526,  526,  526,

      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  411,
      411,  411,  411,  411,  411,  411,  576,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,

      528,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  409,  575,  409,
      664,  404,  134,  409,  134,  574,  409,  409,  178,  178,
      409,  409,  409,  409,  573,  409,  409,  409,  409,  409,
      409,  409,  409,  408,  408,  408,  408,  133,  408,  133,
      408,  408,  408,  408,  408,  408,  408,  406,  408,  408,
      408,  408,  499,  408,  408,  408,  408,  408,  408,  530,
      530,  530,  531,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,

      530,  530,  530,  530,  530,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  410,  410,  498,  410,  410,  410,  410,  192,  192,
      410,  410,  410,  410,  410,  410,  410,  410,  478,  410,
      410,  410,  410,  410,  410,  410,  469,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  407,  407,  468,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  134,  407,  134,  463,  461,

      407,  407,  407,  407,  407,  407,  407,  427,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,

      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  128,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  406,  538,  538,
      538,  538,  538,  538,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  405,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  243,  540,  540,  540,  540,

      540,  540,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  245,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  233,  542,  542,  542,  542,  542,  542,
      754,  754,  754,  235,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  381,  133,  133,  377,  376,  133,  133,
      200,  133,  133,  198,  133,  133,  754,  754,  754,  134,
      361,  134,  754,  754,  754,  321,  754,  754,  754,  299,

      133,  133,  265,  130,  545,  546,  133,  133,  260,  547,
      133,  133,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  254,  245,  133,  133,  242,  133,
      133,  235,  133,  133,  549,  133,  133,  217,  202,  548,
      201,  550,  200,  554,  554,  554,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  198,  552,  133,  133,  551,
      133,  133,  194,  133,  133,  175,  133,  133,  170,  754,
      754,  754,  754,  754,  754,  553,  754,  754,  754,  137,
      754,  754,  754,  133,  133,  130,  133,  133,  754,   85,
      133,  133,   85,  754,  133,  133,  754,  754,  754,  555,

      754,  754,  754,  556,  558,  557,  754,  754,  754,  754,
      133,  133,  754,  754,  133,  133,  559,  561,  754,  754,
      133,  133,  754,  754,  754,  560,  754,  754,  754,  754,
      754,  754,  754,  543,  543,  543,  133,  133,  754,  754,
      133,  133,  563,  754,  133,  133,  754,  754,  564,  754,
      562,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  565,  754,  754,  133,  133,  754,  133,  133,
      754,  133,  133,  754,  566,  567,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  594,  754,
      133,  133,  754,  568,  133,  133,  462,  133,  133,  754,

      462,  462,  462,  462,  462,  462,  754,  593,  593,  754,
      754,  754,  688,  688,  688,  593,  593,  593,  593,  641,
      641,  641,  571,  133,  133,  754,  754,  569,  593,  593,
      593,  593,  593,  593,  754,  754,  570,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  700,
      754,  133,  133,  754,  133,  133,  754,  133,  133,  754,
      133,  133,  754,  754,  754,  754,  754,  701,  754,  754,
      754,  672,  754,  754,  754,  754,  133,  133,  754,  754,
      595,  596,  133,  133,  754,  754,  133,  133,  754,  754,
      754,  754,  754,  754,  754,  554,  554,  554,  514,  514,

      514,  514,  133,  133,  754,  133,  133,  754,  754,  597,
      754,  754,  754,  598,  599,  754,  754,  754,  754,  754,
      754,  704,  704,  704,  133,  133,  754,  754,  754,  133,
      133,  754,  754,  600,  754,  602,  601,  603,  754,  754,
      133,  133,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  604,  605,  754,  754,  133,  133,  714,  133,
      133,  754,  133,  133,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  715,  754,  133,  133,
      754,  133,  133,  754,  133,  133,  754,  133,  133,  754,
      754,  754,  754,  606,  754,  754,  754,  754,  754,  607,

      754,  754,  754,  133,  133,  754,  754,  610,  133,  133,
      754,  754,  609,  754,  133,  133,  754,  608,  754,  754,
      754,  754,  754,  754,  754,  611,  754,  754,  754,  754,
      754,  754,  133,  133,  754,  133,  133,  641,  641,  641,
      133,  133,  754,  133,  133,  754,  612,  754,  673,  673,
      673,  133,  133,  613,  754,  754,  754,  614,  572,  754,
      615,  754,  572,  572,  572,  572,  572,  572,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  754,  616,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      389,  390,  391,  754,  754,  754,  754,  391,  754,  391,

      687,  389,  754,  754,  754,  754,  392,  754,  391,  389,
      754,  392,  754,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  392,  754,  389,  391,  754,  754,  390,  391,
      391,  754,  391,  390,  392,  634,  634,  754,  754,  392,
      754,  754,  754,  634,  634,  634,  634,  754,  754,  754,
      754,  754,  754,  754,  133,  133,  634,  634,  634,  634,
      634,  634,  133,  133,  754,  133,  133,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  133,  133,  754,  133,  133,  754,  133,  133,  754,
      133,  133,  754,  636,  754,  637,  754,  754,  754,  754,

      754,  754,  639,  754,  754,  638,  754,  754,  642,  754,
      133,  133,  754,  133,  133,  754,  754,  754,  754,  754,
      754,  754,  754,  640,  645,  754,  754,  754,  754,  133,
      133,  754,  133,  133,  754,  646,  754,  754,  754,  133,
      133,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      647,  754,  754,  754,  648,  133,  133,  754,  133,  133,
      649,  133,  133,  754,  754,  133,  133,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  650,  673,  673,  673,
      754,  133,  133,  651,  133,  133,  754,  133,  133,  652,
      754,  133,  133,  754,  754,  754,  390,  390,  390,  390,

      754,  390,  390,  390,  390,  653,  390,  390,  390,  390,
      390,  390,  754,  754,  754,  391,  654,  389,  389,  389,
      389,  389,  754,  389,  754,  754,  754,  389,  389,  389,
      389,  389,  389,  389,  754,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  391,  754,  391,  754,  754,  754,  391,  754,  754,
      391,  391,  754,  754,  391,  391,  391,  391,  754,  391,
      391,  391,  391,  391,  391,  391,  391,  390,  390,  390,
      390,  754,  390,  754,  390,  390,  390,  392,  392,  754,

      392,  392,  392,  392,  754,  754,  392,  392,  392,  392,
      392,  392,  392,  392,  754,  392,  392,  392,  392,  392,
      392,  392,  754,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  393,  393,  393,  393,  393,
      393,  393,  754,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  665,  665,  754,  754,  754,  754,  754,  754,  665,
      665,  665,  665,  754,  754,  754,  754,  133,  133,  754,
      133,  133,  665,  665,  665,  665,  665,  665,  133,  133,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  133,  133,  754,  133,  133,  754,
      133,  133,  754,  669,  133,  133,  754,  667,  754,  668,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  671,  133,  133,  754,  133,
      133,  670,  754,  675,  133,  133,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,

      133,  133,  754,  677,  133,  133,  754,  754,  676,  133,
      133,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  678,  754,  133,  133,  754,  133,  133,
      754,  133,  133,  754,  133,  133,  754,  754,  754,  679,
      754,  754,  754,  754,  754,  754,  754,  754,  680,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,

      508,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  519,  754,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  754,  520,
      520,  520,  520,  520,  520,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      754,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  754,  522,  522,  522,
      522,  522,  522,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  754,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  681,
      681,  754,  754,  754,  754,  754,  754,  681,  681,  681,
      681,  754,  754,  754,  754,  133,  133,  754,  133,  133,
      681,  681,  681,  681,  681,  681,  133,  133,  688,  688,
      688,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  133,  133,  754,  133,  133,  754,  133,  133,

      754,  754,  683,  133,  133,  754,  754,  754,  754,  754,
      685,  754,  684,  754,  754,  754,  754,  754,  754,  133,
      133,  754,  754,  754,  754,  754,  690,  754,  691,  133,
      133,  754,  754,  754,  754,  689,  754,  694,  694,  754,
      754,  754,  754,  754,  692,  694,  694,  694,  694,  754,
      754,  754,  754,  133,  133,  754,  754,  693,  694,  694,
      694,  694,  694,  694,  133,  133,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  696,  754,
      133,  133,  754,  133,  133,  754,  133,  133,  754,  133,
      133,  704,  704,  704,  754,  754,  754,  754,  754,  754,

      754,  754,  754,  754,  754,  133,  133,  706,  706,  703,
      133,  133,  754,  697,  702,  706,  706,  706,  706,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  706,  706,
      706,  706,  706,  706,  133,  133,  754,  133,  133,  754,
      754,  754,  754,  754,  705,  754,  754,  754,  754,  754,
      754,  754,  754,  133,  133,  754,  754,  754,  754,  133,
      133,  754,  133,  133,  754,  754,  754,  754,  754,  133,
      133,  754,  754,  754,  712,  754,  754,  754,  133,  133,
      713,  754,  754,  754,  754,  133,  133,  754,  754,  133,
      133,  754,  754,  754,  754,  716,  133,  133,  754,  754,

      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  730,  754,  754,  722,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  171,  171,  171,  171,  179,  179,
      179,  179,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  195,  195,  195,  195,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  199,
      199,  754,  199,  199,  199,  199,  754,  199,  199,  199,
      199,  199,  218,  218,  754,  754,  218,  218,  218,  218,

      754,  218,  218,  218,  218,  218,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      249,  754,  754,  249,  249,  249,  249,  249,  249,  249,
      754,  754,  249,  249,  251,  251,  754,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  171,  171,
      171,  171,  362,  362,  362,  362,  374,  374,  374,  374,
      375,  375,  375,  375,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  199,  199,
      754,  199,  199,  199,  199,  754,  199,  199,  199,  199,
      199,  218,  218,  754,  754,  218,  218,  218,  218,  754,

      218,  218,  218,  218,  218,  249,  754,  754,  249,  249,
      249,  249,  249,  249,  249,  754,  754,  249,  249,  251,
      251,  754,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  252,  252,  754,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  171,  171,  171,
      171,  252,  252,  754,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  134,  134,  754,  134,  754,
      134,   23,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,

      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,

      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754
    } ;

static const flex_int16_t yy_chk[5415] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    7,    8,   11,   12,   13,   14,  305,   13,
       14,   17,   17,   17,   18,   18,   18,   19,   19,   19,
      788,   19,   20,   20,   20,   25,   20,   25,   33,   33,
       35,   35,  776,    7,    8,  305,   11,   12,   13,   14,
       38,   38,   44,   44,   45,   45,  751,   46,   46,   50,
       50,  750,   51,   51,   54,   54,   52,   52,  747,   53,

       53,   65,   65,  746,   27,  174,   27,   64,   64,   56,
       56,   17,   46,  174,   18,   57,   57,   52,   45,  745,
       55,   55,   50,  744,   53,   54,   19,   54,   50,   51,
       52,   20,   50,   53,   64,   56,   51,   58,   58,   65,
       57,   55,   56,  258,   64,  258,   62,   62,  742,   57,
       59,   59,  741,   19,   55,   61,   61,   55,   20,   99,
       55,   99,   58,   60,   60,  740,   66,   66,  104,  104,
      739,   62,  104,   63,   63,  129,  129,    7,    8,   11,
       12,   15,   15,   15,   59,   60,   62,   17,  738,   61,
       18,  308,   61,   66,  110,  110,  112,  112,  112,  308,

       60,   25,  110,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   63,  131,  131,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       27,   71,  132,  132,  107,   71,  107,   71,   71,  115,
      115,  115,  134,  134,   71,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,  116,  116,  116,  138,  138,
      126,  737,   75,  126,  126,  736,   75,   75,  735,   78,
       78,   78,  316,   78,  316,   78,   78,   78,   78,   78,
       78,  128,  138,  128,  317,   99,  317,  135,  135,  142,

      142,  136,  136,   75,   75,  146,  146,   75,   75,  734,
       78,  153,  153,   15,   15,   78,  113,   15,  113,   15,
       16,   16,   16,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,  135,
      136,  733,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,  139,  139,  732,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,  318,
      107,  318,  143,  143,  731,  113,  139,  729,   92,  141,
      141,  728,  140,  140,  147,  147,   92,   92,  727,  145,

      145,  724,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  113,   92,  141,   92,  723,   92,   92,  103,
      140,  143,   92,  103,  103,  145,  233,  128,  233,   92,
      150,  150,  147,   92,  721,   92,   92,   92,  720,   92,
      144,  144,  148,  148,  149,  149,  151,  151,  155,  155,
      103,  103,   16,   16,  103,  103,   16,  462,   16,   21,
       21,   21,  159,  159,  144,  462,  148,  150,  160,  160,
      719,  151,  149,  144,  176,  176,  718,  144,  177,  177,
      155,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,  159,  152,  152,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   92,   97,
      154,  154,  156,  156,   97,  152,  717,  157,  157,  158,
      158,  715,   97,   97,  161,  161,  162,  162,  163,  163,
      165,  165,  714,  154,  167,  167,  164,  164,  711,  166,
      166,   97,  710,   97,   97,  154,  156,  709,   97,  168,
      168,  162,  233,  165,  708,   97,  157,  707,  158,   97,
      162,   97,  161,   97,  166,   97,  163,  164,  169,  169,
      319,  185,  319,  185,  168,  185,  166,   21,  167,  190,
      190,   21,   21,  189,  189,   21,  189,   21,   22,   22,

       22,  204,  204,  205,  205,  701,  169,  217,  217,  222,
      222,  223,  223,  234,  234,  237,  237,  238,  238,  700,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
      244,  244,  699,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  188,  188,  259,
      259,  188,  188,  698,  125,  250,  250,  250,  125,  125,
      695,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      243,  320,  243,  320,  181,  188,  253,  253,  253,  180,

      263,  263,  188,  264,  264,  125,  125,  180,  687,  125,
      125,  181,  389,  180,  389,  181,  181,  181,  181,  181,
      181,  181,  181,  686,  181,  181,   22,  266,  266,  682,
       22,   22,  276,  276,   22,  672,   22,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,

       74,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  666,  102,
      102,  102,  102,  102,  102,  102,  243,  286,  286,  296,
      296,  268,  268,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  268,  124,  124,  124,  124,
      124,  124,  124,  390,  251,  390,  251,  643,  267,  267,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  182,  182,  182,  182,  182,

      182,  182,  182,  182,  182,  182,  182,  635,  182,  182,
      267,  269,  269,  626,  182,  183,  272,  272,  273,  273,
      572,  270,  270,  183,  183,  183,  183,  183,  572,  183,
      183,  183,  269,  618,  183,  274,  274,  617,  183,  183,
      183,  183,  183,  251,  270,  272,  603,  271,  271,  183,
      277,  277,  273,  183,  272,  272,  602,  183,  183,  594,
      183,  183,  183,  274,  183,  183,  186,  186,  592,  186,
      251,  186,  271,  591,  186,  186,  275,  275,  279,  279,
      186,  277,  590,  187,  187,  297,  297,  391,  186,  391,
      278,  278,  187,  295,  295,  187,  187,  187,  187,  187,

      187,  275,  392,  279,  392,  186,  186,  186,  186,  187,
      187,  187,  187,  194,  194,  194,  194,  194,  194,  194,
      206,  206,  278,  194,  194,  194,  194,  295,  206,  206,
      206,  206,  280,  280,  304,  589,  304,  378,  378,  215,
      215,  206,  206,  206,  206,  206,  206,  215,  215,  215,
      215,  381,  381,  384,  384,  280,  281,  281,  232,  232,
      215,  215,  215,  215,  215,  215,  232,  232,  232,  232,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  232,
      232,  232,  232,  232,  232,  282,  282,  281,  242,  242,
      242,  242,  242,  242,  242,  588,  239,  241,  242,  242,

      242,  242,  283,  283,  587,  241,  241,  241,  241,  241,
      586,  241,  241,  241,  298,  298,  241,  285,  285,  585,
      241,  241,  241,  241,  241,  282,  284,  284,  385,  385,
      393,  241,  393,  582,  283,  241,  288,  288,  285,  241,
      241,  581,  241,  241,  241,  298,  241,  241,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  257,  290,  290,
      524,  284,  287,  287,  523,  257,  257,  257,  257,  257,
      304,  257,  257,  257,  522,  288,  257,  291,  291,  521,
      257,  257,  257,  257,  257,  520,  481,  287,  481,  300,
      300,  257,  290,  290,  519,  257,  300,  500,  500,  257,

      257,  518,  257,  257,  257,  517,  257,  257,  260,  260,
      260,  260,  260,  260,  260,  289,  289,  291,  260,  260,
      260,  260,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  292,  292,  514,  293,  293,  294,  294,  512,  289,
      379,  379,  505,  505,  428,  428,  428,  289,  379,  379,
      379,  379,  511,  429,  429,  429,  292,  293,  428,  428,
      510,  379,  379,  379,  379,  379,  379,  429,  429,  294,
      294,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  508,  302,
      302,  302,  302,  302,  302,  302,  485,  507,  485,  429,

      487,  497,  487,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  496,  466,
      466,  488,  509,  488,  509,  303,  466,  577,  577,  303,
      303,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  495,  373,  373,  373,
      373,  373,  373,  513,  494,  513,  303,  303,  579,  579,
      303,  303,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,

      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  368,  368,  368,  368,  368,  368,  368,  368,

      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      380,  380,  515,  516,  515,  516,  386,  386,  380,  380,
      380,  380,  583,  583,  386,  386,  386,  386,  627,  627,
      493,  380,  380,  380,  380,  380,  380,  386,  386,  386,
      386,  386,  386,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  492,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  491,
      396,  628,  628,  490,  396,  630,  630,  396,  396,  631,
      631,  396,  396,  396,  396,  489,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  764,  396,
      764,  396,  396,  396,  397,  397,  397,  397,  486,  397,
      397,  397,  397,  484,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  398,  398,
      398,  398,  398,  398,  483,  398,  398,  398,  398,  632,
      632,  398,  398,  398,  398,  398,  398,  398,  398,  482,
      398,  398,  398,  398,  398,  398,  398,  480,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  479,  398,  398,  398,

      398,  399,  399,  399,  399,  399,  478,  399,  629,  629,
      629,  399,  399,  399,  399,  399,  399,  399,  477,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  402,  476,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  475,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      474,  402,  402,  402,  402,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,

      403,  403,  403,  403,  403,  403,  473,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  472,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  471,  404,  404,  404,  404,  404,
      404,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,

      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  470,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  418,

      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  469,  418,
      633,  633,  765,  418,  765,  468,  418,  418,  767,  767,
      418,  418,  418,  418,  467,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  779,  418,  779,
      418,  418,  418,  419,  419,  419,  419,  406,  419,  419,
      419,  419,  377,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,

      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  420,  420,  420,
      420,  420,  420,  376,  420,  420,  420,  420,  769,  769,
      420,  420,  420,  420,  420,  420,  420,  420,  343,  420,
      420,  420,  420,  420,  420,  420,  312,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  311,  420,  420,  420,  420,
      421,  421,  421,  421,  421,  780,  421,  780,  301,  299,

      421,  421,  421,  421,  421,  421,  421,  265,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,

      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      424,  262,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  252,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  248,
      424,  424,  424,  424,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  247,  425,  425,  425,  425,

      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  245,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  240,  426,  426,  426,  426,  426,  426,
      430,  430,  430,  235,  431,  431,  431,  432,  432,  432,
      433,  433,  433,  216,  430,  430,  202,  201,  431,  431,
      200,  432,  432,  197,  433,  433,  434,  434,  434,  792,
      191,  792,  435,  435,  435,  184,  436,  436,  436,  170,

      434,  434,  137,  130,  430,  431,  435,  435,  127,  433,
      436,  436,  437,  437,  437,  438,  438,  438,  439,  439,
      439,  440,  440,  440,  123,  108,  437,  437,  105,  438,
      438,  100,  439,  439,  435,  440,  440,   93,   89,  434,
       88,  436,   87,  441,  441,  441,  442,  442,  442,  443,
      443,  443,  444,  444,  444,   84,  440,  441,  441,  437,
      442,  442,   80,  443,  443,   73,  444,  444,   67,  445,
      445,  445,  446,  446,  446,  440,  447,  447,  447,   47,
      448,  448,  448,  445,  445,   26,  446,  446,   23,    6,
      447,  447,    5,    0,  448,  448,  449,  449,  449,  442,

      450,  450,  450,  443,  445,  444,  451,  451,  451,    0,
      449,  449,    0,    0,  450,  450,  447,  448,    0,    0,
      451,  451,  452,  452,  452,  447,  453,  453,  453,    0,
      454,  454,  454,  543,  543,  543,  452,  452,    0,    0,
      453,  453,  450,    0,  454,  454,    0,    0,  451,    0,
      449,  455,  455,  455,  456,  456,  456,  457,  457,  457,
        0,    0,  452,    0,    0,  455,  455,    0,  456,  456,
        0,  457,  457,    0,  453,  454,  458,  458,  458,    0,
      459,  459,  459,  460,  460,  460,    0,    0,  543,    0,
      458,  458,    0,  456,  459,  459,  463,  460,  460,    0,

      463,  463,  463,  463,  463,  463,    0,  501,  501,  544,
      544,  544,  688,  688,  688,  501,  501,  501,  501,  641,
      641,  641,  460,  544,  544,    0,    0,  458,  501,  501,
      501,  501,  501,  501,    0,    0,  459,  545,  545,  545,
      546,  546,  546,  547,  547,  547,  548,  548,  548,  688,
        0,  545,  545,    0,  546,  546,    0,  547,  547,    0,
      548,  548,  549,  549,  549,    0,    0,  688,  550,  550,
      550,  641,  551,  551,  551,    0,  549,  549,    0,    0,
      547,  548,  550,  550,    0,    0,  551,  551,  552,  552,
      552,  553,  553,  553,    0,  554,  554,  554,  659,  659,

      659,  659,  552,  552,    0,  553,  553,    0,    0,  549,
      555,  555,  555,  550,  551,  556,  556,  556,    0,    0,
        0,  704,  704,  704,  555,  555,  557,  557,  557,  556,
      556,    0,    0,  552,    0,  554,  553,  554,    0,    0,
      557,  557,  558,  558,  558,  559,  559,  559,  560,  560,
      560,    0,  555,  556,    0,    0,  558,  558,  704,  559,
      559,    0,  560,  560,  561,  561,  561,  562,  562,  562,
      563,  563,  563,  564,  564,  564,  704,    0,  561,  561,
        0,  562,  562,    0,  563,  563,    0,  564,  564,  565,
      565,  565,    0,  559,  566,  566,  566,    0,    0,  560,

      567,  567,  567,  565,  565,    0,    0,  563,  566,  566,
        0,    0,  562,    0,  567,  567,    0,  561,  568,  568,
      568,  569,  569,  569,    0,  564,  570,  570,  570,  571,
      571,  571,  568,  568,    0,  569,  569,  600,  600,  600,
      570,  570,    0,  571,  571,    0,  566,    0,  673,  673,
      673,  600,  600,  567,    0,    0,    0,  568,  573,    0,
      569,    0,  573,  573,  573,  573,  573,  573,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,    0,  569,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      576,  578,  578,    0,    0,    0,    0,  578,    0,  578,

      673,  576,    0,    0,    0,    0,  580,    0,  578,  576,
        0,  580,    0,  576,  576,  619,  619,  576,  619,  619,
      619,  619,  580,    0,  576,  578,    0,    0,  578,  578,
      578,    0,  578,  578,  580,  593,  593,    0,    0,  580,
      595,  595,  595,  593,  593,  593,  593,    0,  596,  596,
      596,  597,  597,  597,  595,  595,  593,  593,  593,  593,
      593,  593,  596,  596,    0,  597,  597,  598,  598,  598,
      599,  599,  599,  601,  601,  601,  604,  604,  604,    0,
        0,  598,  598,    0,  599,  599,    0,  601,  601,    0,
      604,  604,    0,  595,    0,  596,  605,  605,  605,  606,

      606,  606,  598,    0,    0,  597,    0,    0,  601,    0,
      605,  605,    0,  606,  606,  607,  607,  607,  608,  608,
      608,    0,    0,  599,  604,  609,  609,  609,    0,  607,
      607,    0,  608,  608,    0,  605,    0,    0,    0,  609,
      609,  610,  610,  610,  611,  611,  611,  612,  612,  612,
      606,  613,  613,  613,  607,  610,  610,    0,  611,  611,
      609,  612,  612,    0,    0,  613,  613,  614,  614,  614,
      615,  615,  615,  616,  616,  616,  610,  642,  642,  642,
        0,  614,  614,  611,  615,  615,    0,  616,  616,  612,
        0,  642,  642,    0,    0,    0,  622,  622,  622,  622,

        0,  622,  622,  622,  622,  614,  622,  622,  622,  622,
      622,  622,    0,    0,    0,  622,  615,  620,  620,  620,
      620,  620,    0,  620,    0,    0,    0,  620,  620,  620,
      620,  620,  620,  620,    0,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  621,    0,  621,    0,    0,    0,  621,    0,    0,
      621,  621,    0,    0,  621,  621,  621,  621,    0,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,    0,  621,    0,  621,  621,  621,  623,  623,    0,

      623,  623,  623,  623,    0,    0,  623,  623,  623,  623,
      623,  623,  623,  623,    0,  623,  623,  623,  623,  623,
      623,  623,    0,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,    0,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,

      625,  634,  634,  636,  636,  636,  637,  637,  637,  634,
      634,  634,  634,    0,  638,  638,  638,  636,  636,    0,
      637,  637,  634,  634,  634,  634,  634,  634,  638,  638,
      639,  639,  639,  640,  640,  640,  645,  645,  645,    0,
      646,  646,  646,    0,  639,  639,    0,  640,  640,    0,
      645,  645,    0,  638,  646,  646,    0,  636,    0,  637,
        0,    0,  647,  647,  647,  648,  648,  648,    0,    0,
      649,  649,  649,    0,    0,  640,  647,  647,    0,  648,
      648,  639,    0,  645,  649,  649,  650,  650,  650,    0,
      651,  651,  651,    0,    0,  652,  652,  652,    0,    0,

      650,  650,    0,  648,  651,  651,    0,    0,  647,  652,
      652,  653,  653,  653,  654,  654,  654,  668,  668,  668,
      669,  669,  669,  649,    0,  653,  653,    0,  654,  654,
        0,  668,  668,    0,  669,  669,    0,    0,    0,  650,
        0,    0,    0,    0,    0,    0,    0,    0,  652,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,

      655,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,

      658,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  661,    0,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,    0,  661,
      661,  661,  661,  661,  661,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
        0,  662,  662,  662,  662,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,

      663,  663,  663,  663,  663,  663,    0,  663,  663,  663,
      663,  663,  663,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,    0,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  665,
      665,  667,  667,  667,  670,  670,  670,  665,  665,  665,
      665,    0,  671,  671,  671,  667,  667,    0,  670,  670,
      665,  665,  665,  665,  665,  665,  671,  671,  675,  675,
      675,  676,  676,  676,  677,  677,  677,    0,    0,  678,
      678,  678,  675,  675,    0,  676,  676,    0,  677,  677,

        0,    0,  667,  678,  678,  679,  679,  679,    0,    0,
      671,    0,  670,    0,    0,  680,  680,  680,    0,  679,
      679,    0,    0,    0,    0,    0,  677,    0,  678,  680,
      680,    0,    0,    0,    0,  676,    0,  681,  681,  683,
      683,  683,    0,    0,  679,  681,  681,  681,  681,    0,
      684,  684,  684,  683,  683,    0,    0,  680,  681,  681,
      681,  681,  681,  681,  684,  684,  685,  685,  685,  689,
      689,  689,  690,  690,  690,  691,  691,  691,  683,    0,
      685,  685,    0,  689,  689,    0,  690,  690,    0,  691,
      691,  692,  692,  692,    0,    0,  693,  693,  693,    0,

        0,    0,    0,    0,    0,  692,  692,  694,  694,  690,
      693,  693,    0,  685,  689,  694,  694,  694,  694,    0,
      696,  696,  696,  697,  697,  697,    0,    0,  694,  694,
      694,  694,  694,  694,  696,  696,    0,  697,  697,  702,
      702,  702,    0,    0,  693,  703,  703,  703,  705,  705,
      705,    0,    0,  702,  702,  712,  712,  712,    0,  703,
      703,    0,  705,  705,  713,  713,  713,    0,    0,  712,
      712,  716,  716,  716,  702,  722,  722,  722,  713,  713,
      703,    0,  730,  730,  730,  716,  716,    0,    0,  722,
      722,    0,    0,    0,    0,  705,  730,  730,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  722,    0,    0,  713,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,

      760,  760,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  766,  766,  766,  766,  768,  768,
      768,  768,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  771,  771,  771,  771,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  773,
      773,    0,  773,  773,  773,  773,    0,  773,  773,  773,
      773,  773,  774,  774,    0,    0,  774,  774,  774,  774,

        0,  774,  774,  774,  774,  774,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      777,    0,    0,  777,  777,  777,  777,  777,  777,  777,
        0,    0,  777,  777,  778,  778,    0,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  781,  781,
      781,  781,  782,  782,  782,  782,  783,  783,  783,  783,
      784,  784,  784,  784,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  786,  786,
        0,  786,  786,  786,  786,    0,  786,  786,  786,  786,
      786,  787,  787,    0,    0,  787,  787,  787,  787,    0,

      787,  787,  787,  787,  787,  789,    0,    0,  789,  789,
      789,  789,  789,  789,  789,    0,    0,  789,  789,  790,
      790,    0,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  791,  791,    0,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  793,  793,  793,
      793,  794,  794,    0,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  795,  795,    0,  795,    0,
      795,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,

      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,

      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../mli-root/src/database-lexer.ll"
/* Copyright (C) 2017, 2021 Hans Åberg.

   This file is part of MLI, MetaLogic Inference.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
#line 19 "../../mli-root/src/database-lexer.ll"

#if (YY_FLEX_MAJOR_VERSION < 2 || (YY_FLEX_MAJOR_VERSION == 2 && YY_FLEX_MINOR_VERSION < 6)\
  || (YY_FLEX_MAJOR_VERSION == 2 && YY_FLEX_MINOR_VERSION == 6 && YY_FLEX_SUBMINOR_VERSION < 4))
#error "Flex version 2.6.4 or later required."
#endif

#include "database-parser.hh"

#include <iostream>
#include <fstream>
#include <locale>
#include <set>
#include <stack>
#include <string>
#include <sstream>
#include <vector>

#include "proposition.hh"
#include "basictype.hh"


#define YYERRCODE	256

#define the_text std::string(yytext, yyleng)
#define get_text yylval.text = std::string(yytext, yyleng)

std::vector<std::string> dirs; // Directory search-paths; for included files.

bool verbose = false;

bool declaration_context = false;
bool binder_declaration_context = false;
bool meta_context = false;
bool maybe_set_declaration_context = false;
bool proofline_database_context = false;
bool statement_substitution_context = false;
int bracket_depth = 0;
mli::database_parser::token_type declared_token = mli::free_variable_context;
int declared_type = 0;

int current_token = 0;

std::stack<YY_BUFFER_STATE> include_stack;
std::stack<mli::location_type> location_stack;

std::stack<std::istream::pos_type> current_position_stack;
std::istream::pos_type current_position = 0;

std::stack<std::istream::pos_type> line_position_stack;
std::istream::pos_type line_position = 0;

std::stack<std::string> filename_stack;
std::stack<std::string> filepath_stack;

int logic_prefix_count = 0;

bool old_line_comment = false;
bool old_block_comment = false;

std::string str;

mli::kleenean directive_type = false;

mli::location_type loc0, loc1;

#line 1964 "../../mli-root/src/database-lexer.cc"

/*
whitespace
" " U+2002 en space
" " U+2003 em space
" " U+2004 three-per-em space
" " U+2005 four-per-em space
" " U+2006 six-per-em space
" " U+2007 figure space
" " U+2008 punctuation space
" " U+2009 thin space
" " U+200A hair space
" " U+205F medium mathematical space
*/
/* UTF-8 character with valid Unicode code point. */
#line 214 "../../mli-root/src/database-lexer.ll"
#define YY_USER_ACTION  yylloc.columns(length_utf8(yytext)); current_position += yyleng;
#line 1982 "../../mli-root/src/database-lexer.cc"
#line 1983 "../../mli-root/src/database-lexer.cc"

#define INITIAL 0
#define comment 1
#define line_comment 2
#define block_comment 3
#define directive 4
#define any_identifier 5
#define C_string 6
#define find_set_variable 7
#define find_vertical_line 8
#define include_file 9
#define logic_prefix 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 218 "../../mli-root/src/database-lexer.ll"


#line 221 "../../mli-root/src/database-lexer.ll"
  mli::semantic_type& yylval = *yylvalp;
  mli::location_type& yylloc = *yyllocp;

  if (current_token != 0) { int tok = current_token; current_token = 0; return tok; }

  yylloc.step();


#line 2137 "../../mli-root/src/database-lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 755 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5272 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 229 "../../mli-root/src/database-lexer.ll"
{ yylloc.step(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 230 "../../mli-root/src/database-lexer.ll"
{ yylloc.lines(yyleng); yylloc.step(); line_position = current_position; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 233 "../../mli-root/src/database-lexer.ll"
{ BEGIN(include_file); }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 235 "../../mli-root/src/database-lexer.ll"
/* Eat the whitespace. */
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 237 "../../mli-root/src/database-lexer.ll"
{ /* Get the include file name. */
  include_stack.push(YY_CURRENT_BUFFER);
  std::string str;

  if (yytext[0] == '"')
    str.append(yytext + 1, yyleng - 2);
  else
    str.append(yytext, yyleng);

  std::string path = str; // Full path of file str relative dir directory paths if needed.

  auto fbp = new std::filebuf();
  fbp->open(str, std::ios_base::in);

  if (!fbp->is_open()) {
    // Opening file str failed, so try with directory paths prepended:
    for (auto& i: dirs) {
      path = (i.back() == '/')? i : i + "/";
      path += str;

      fbp->open(path, std::ios_base::in);

      if (fbp->is_open())
        break;
    }

    if (!fbp->is_open()) {
      delete fbp;
      throw mli::database_parser::syntax_error(yylloc, "File " + str + " not found.");
    }
  }

  yyin.rdbuf(fbp);

  filename_stack.push(str);
  filepath_stack.push(path);

  std::cout << "Begin reading " << filename_stack.top();
  if (filename_stack.top() != filepath_stack.top())
    std::cout << " (" << filepath_stack.top() << ")";
  std::cout << std::endl;

  location_stack.push(yylloc);

  current_position_stack.push(current_position);
  current_position = 0;

  line_position_stack.push(line_position);
  line_position = 0;

  yylloc.initialize(&filepath_stack.top());

  yy_switch_to_buffer(yy_create_buffer(yyin, YY_BUF_SIZE));
  BEGIN(INITIAL);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 294 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::include_key; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 295 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::end_key; }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 297 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::formal_system_key; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 298 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::theory_key; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 300 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::postulate_key; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 301 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::axiom_key; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 302 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::rule_key; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 303 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::conjecture_key; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 305 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::definition_key; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 307 "../../mli-root/src/database-lexer.ll"
{ get_text; yylval.number = mli::theorem::lemma_; return mli::database_parser::token::theorem_key; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 308 "../../mli-root/src/database-lexer.ll"
{ get_text; yylval.number = mli::theorem::proposition_; return mli::database_parser::token::theorem_key; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 309 "../../mli-root/src/database-lexer.ll"
{ get_text; yylval.number = mli::theorem::theorem_; return mli::database_parser::token::theorem_key; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 310 "../../mli-root/src/database-lexer.ll"
{ get_text; yylval.number = mli::theorem::corollary_; return mli::database_parser::token::theorem_key; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 312 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::proof_key; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 313 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::end_of_proof_key; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 315 "../../mli-root/src/database-lexer.ll"
{ get_text;
               proofline_database_context = true;
               bracket_depth = 0;
               statement_substitution_context = false;
               return mli::database_parser::token::by_key; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 321 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::result_key; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 322 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::premise_key; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 325 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::metainfer_key; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 327 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::metaor_key; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 328 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::metaand_key; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 329 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::metanot_key; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 332 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::infer_key; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 334 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::object_identical_key; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 335 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::object_not_identical_key; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 336 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::meta_identical_key; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 337 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::meta_not_identical_key; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 339 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::fail_key; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 340 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::succeed_key; }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 342 "../../mli-root/src/database-lexer.ll"
{ get_text; meta_context = true; return mli::database_parser::token::free_for_key; }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 343 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::free_in_key; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 345 "../../mli-root/src/database-lexer.ll"
{ get_text; meta_context = false; return mli::database_parser::token::metain_key; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 348 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::use_key; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 350 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::defined_by_key; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 351 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::defines_key; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 352 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::defined_equal_key; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 354 "../../mli-root/src/database-lexer.ll"
{ declaration_context = true; declared_token = mli::database_parser::token::metaformula_variable;
#if USE_VARIABLE_META
            declared_type = mli::variable::metaformula_;
#else
            declared_type = mli::variable::formula_;
#endif
             return mli::database_parser::token::identifier_variable_key; }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 362 "../../mli-root/src/database-lexer.ll"
{ declaration_context = true; declared_token = mli::database_parser::token::metaformula_variable;
            declared_type = mli::variable::formula_sequence_; return mli::database_parser::token::identifier_variable_key; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 365 "../../mli-root/src/database-lexer.ll"
{ declaration_context = true; declared_token = mli::database_parser::token::object_formula_variable;
            declared_type = mli::variable::formula_; return mli::database_parser::token::identifier_variable_key; }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 367 "../../mli-root/src/database-lexer.ll"
{
             declaration_context = true; declared_token = mli::database_parser::token::predicate_variable;
             declared_type = mli::variable::predicate_; return mli::database_parser::token::identifier_variable_key; }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 370 "../../mli-root/src/database-lexer.ll"
{
            declaration_context = true; declared_token = mli::database_parser::token::atom_variable;
            declared_type = mli::variable::atom_; return mli::database_parser::token::identifier_variable_key; }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 374 "../../mli-root/src/database-lexer.ll"
{
            declaration_context = true; declared_token = mli::database_parser::token::function_variable;
            declared_type = mli::variable::function_; return mli::database_parser::token::identifier_variable_key; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 378 "../../mli-root/src/database-lexer.ll"
{ declaration_context = true; declared_token = mli::database_parser::token::object_variable;
            declared_type = mli::variable::object_; return mli::database_parser::token::identifier_variable_key; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 381 "../../mli-root/src/database-lexer.ll"
{ declaration_context = true; declared_token = mli::database_parser::token::code_variable;
             declared_type = mli::variable::code_; return mli::database_parser::token::identifier_variable_key; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 384 "../../mli-root/src/database-lexer.ll"
{ bound_variable_type = database_parser::token::all_variable; symbol_table.push_level(false);
        return mli::database_parser::token::all_key; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 386 "../../mli-root/src/database-lexer.ll"
{ bound_variable_type = database_parser::token::exist_variable; symbol_table.push_level(false);
        return mli::database_parser::token::exist_key; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 390 "../../mli-root/src/database-lexer.ll"
{
            declaration_context = true; declared_token = mli::database_parser::token::function_key;
            declared_type = mli::term_type_; return mli::database_parser::token::identifier_function_key; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 393 "../../mli-root/src/database-lexer.ll"
{
            declaration_context = true; declared_token = mli::database_parser::token::predicate_key;
            declared_type = mli::object_formula_type_; return mli::database_parser::token::identifier_function_key; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 398 "../../mli-root/src/database-lexer.ll"
{ declaration_context = true; declared_token = mli::database_parser::token::metapredicate_constant;
               declared_type = mli::metaformula_type_; return mli::database_parser::token::identifier_constant_key; }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 400 "../../mli-root/src/database-lexer.ll"
{
            declaration_context = true; declared_token = mli::database_parser::token::predicate_constant;
            declared_type = mli::object_formula_type_; return mli::database_parser::token::identifier_constant_key; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 403 "../../mli-root/src/database-lexer.ll"
{ declaration_context = true; declared_token = mli::database_parser::token::atom_constant;
               declared_type = mli::object_formula_type_; return mli::database_parser::token::identifier_constant_key; }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 406 "../../mli-root/src/database-lexer.ll"
{
            declaration_context = true; declared_token = mli::database_parser::token::function_constant;
            declared_type = mli::term_type_; return mli::database_parser::token::identifier_constant_key; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 409 "../../mli-root/src/database-lexer.ll"
{ declaration_context = true; declared_token = mli::database_parser::token::term_constant;
               declared_type = mli::term_type_; return mli::database_parser::token::identifier_constant_key; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 412 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::implies_key; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 413 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::impliedby_key; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 414 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::equivalent_key; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 416 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::logical_and_key; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 417 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::logical_or_key; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 418 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::logical_not_key; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 420 "../../mli-root/src/database-lexer.ll"
{ declaration_context = false;
       bound_variable_type = free_variable_context;
       return mli::database_parser::token::colon_key; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 423 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::comma_key; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 424 "../../mli-root/src/database-lexer.ll"
{ declaration_context = false;
       bound_variable_type = free_variable_context;
       return mli::database_parser::token::period_key; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 428 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::semicolon_key; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 431 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::less_key; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 432 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::greater_key; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 433 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::less_or_equal_key; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 434 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::greater_or_equal_key; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 436 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::not_less_key; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 437 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::not_greater_key; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 438 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::not_less_or_equal_key; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 439 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::not_greater_or_equal_key; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 441 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::equal_key; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 442 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::not_equal_key; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 445 "../../mli-root/src/database-lexer.ll"
{ get_text; bound_variable_type = free_variable_context; return mli::database_parser::token::mapsto_key; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 446 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::Mapsto_key; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 448 "../../mli-root/src/database-lexer.ll"
{ get_text; bound_variable_type = database_parser::token::function_map_variable; symbol_table.push_level(false);
      return mli::database_parser::token::function_map_prefix_key; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 451 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::degree_key; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 452 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::bullet_key; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 454 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::subscript_x_key; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 457 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::left_parenthesis_key; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 458 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::right_parenthesis_key; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 460 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::superscript_left_parenthesis_key; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 461 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::superscript_right_parenthesis_key; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 463 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::subscript_left_parenthesis_key; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 464 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::subscript_right_parenthesis_key; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 467 "../../mli-root/src/database-lexer.ll"
{ if (proofline_database_context)
         ++bracket_depth;
       if (bracket_depth == 1)
         statement_substitution_context = true;
       return mli::database_parser::token::left_bracket_key; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 472 "../../mli-root/src/database-lexer.ll"
{ if (proofline_database_context)
         --bracket_depth;
       return mli::database_parser::token::right_bracket_key; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 476 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::left_angle_bracket_key; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 477 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::right_angle_bracket_key; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 479 "../../mli-root/src/database-lexer.ll"
{ maybe_set_declaration_context = true;
       BEGIN(find_set_variable);
       return mli::database_parser::token::left_brace_key; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 482 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::vertical_line_key; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 483 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::right_brace_key; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 485 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::tilde_key; }
	YY_BREAK

case 99:
YY_RULE_SETUP
#line 488 "../../mli-root/src/database-lexer.ll"
{ yylloc.step(); }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 489 "../../mli-root/src/database-lexer.ll"
{ yylloc.lines(yyleng); yylloc.step(); line_position = current_position; }
	YY_BREAK


case 101:
YY_RULE_SETUP
#line 493 "../../mli-root/src/database-lexer.ll"
{ yylloc.step(); }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 494 "../../mli-root/src/database-lexer.ll"
{ yylloc.lines(yyleng); yylloc.step(); line_position = current_position; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 496 "../../mli-root/src/database-lexer.ll"
{
    // The set bar | as in {𝒙|𝑨}, or ∈ as in {𝒙∈𝑆|𝑨} has been found, so 𝒙 in yylval.text
    // should be defined at a new symbol table secondary level as a bound set variable.
    // Save "|" in current_token so that it will returned on the next lexer call.
    if (std::string(yytext, yyleng) == "|")
      current_token = mli::database_parser::token::vertical_line_key;
    else
      current_token = mli::database_parser::token::in_key;
    bound_variable_type = database_parser::token::set_variable;
    maybe_set_declaration_context = false;
    BEGIN(INITIAL);

    symbol_table.push_level(false);
    database_parser::token_type ret = define_variable(yylval);
    bound_variable_type = mli::free_variable_context;
    return database_parser::token::set_variable_definition;
  }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 514 "../../mli-root/src/database-lexer.ll"
{ yyless(0); BEGIN(INITIAL); maybe_set_declaration_context = false;
      database_parser::token_type ret = define_variable(yylval);
      return ret;
  }
	YY_BREAK

case 105:
YY_RULE_SETUP
#line 521 "../../mli-root/src/database-lexer.ll"
{
    bound_variable_type = database_parser::token::is_set_variable;
    get_text;
    return mli::database_parser::token::is_set_key; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 525 "../../mli-root/src/database-lexer.ll"
{
    bound_variable_type = database_parser::token::is_set_variable;
    get_text;
    return mli::database_parser::token::power_set_key; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 530 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::empty_set_key; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 531 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::in_key; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 532 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::not_in_key; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 534 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::set_complement_key; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 535 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::set_union_key; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 536 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::set_intersection_key; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 537 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::set_difference_key; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 538 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::set_union_operator_key; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 539 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::set_intersection_operator_key; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 540 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::subset_key; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 541 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::proper_subset_key; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 542 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::superset_key; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 543 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::proper_superset_key; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 546 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::slash_key; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 547 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::backslash_key; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 550 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::factorial_key; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 552 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::mult_key; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 553 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::plus_key; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 554 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::minus_key; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 557 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::if_key; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 558 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::then_key; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 559 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::else_key; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 561 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::while_key; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 562 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::do_key; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 563 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::loop_key; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 564 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::for_key; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 566 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::break_key; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 567 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::continue_key; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 569 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::throw_key; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 570 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::try_key; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 571 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::catch_key; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 574 "../../mli-root/src/database-lexer.ll"
{
  get_text;
  yylval.object = mli::ref<mli::integer>(mli::make, yytext);
  return mli::database_parser::token::natural_number_value;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 580 "../../mli-root/src/database-lexer.ll"
{
  get_text;
  yylval.object = mli::ref<mli::integer>(mli::make, yytext);
  return mli::database_parser::token::integer_value;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 587 "../../mli-root/src/database-lexer.ll"
{
  get_text;
  yylval.object = mli::ref<mli::integer>(mli::make, subscript_to_string(yytext));
  return mli::database_parser::token::subscript_natural_number_value;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 593 "../../mli-root/src/database-lexer.ll"
{
  get_text;
  yylval.object = mli::ref<mli::integer>(mli::make, subscript_to_string(yytext));
  return mli::database_parser::token::subscript_integer_value;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 600 "../../mli-root/src/database-lexer.ll"
{
  get_text;
  yylval.object = mli::ref<mli::integer>(mli::make, superscript_to_string(yytext));
  return mli::database_parser::token::superscript_natural_number_value;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 606 "../../mli-root/src/database-lexer.ll"
{
  get_text;
  yylval.object = mli::ref<mli::integer>(mli::make, superscript_to_string(yytext));
  return mli::database_parser::token::superscript_integer_value;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 615 "../../mli-root/src/database-lexer.ll"
{
  get_text;

  if (maybe_set_declaration_context) {
    BEGIN(find_vertical_line);
    YY_BREAK;
  }

  database_parser::token_type ret = define_variable(yylval);

  return ret;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 629 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::label_key; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 632 "../../mli-root/src/database-lexer.ll"
{ yylval.text.clear(); BEGIN(any_identifier); }
	YY_BREAK

case 147:
YY_RULE_SETUP
#line 635 "../../mli-root/src/database-lexer.ll"
{ /* Closing quote - all done. Text now in yylval.text. */
    BEGIN(INITIAL);

    database_parser::token_type ret = define_variable(yylval);

    if (maybe_set_declaration_context) {
      BEGIN(find_vertical_line);
      YY_BREAK;
    }

    return ret;
  }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 648 "../../mli-root/src/database-lexer.ll"
{
    BEGIN(INITIAL);
    throw mli::database_parser::syntax_error(yylloc,
     "String with “; an earlier string might be unterminated.");
  }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 653 "../../mli-root/src/database-lexer.ll"
{ yylval.text += "“"; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 654 "../../mli-root/src/database-lexer.ll"
{ yylval.text += "”"; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 656 "../../mli-root/src/database-lexer.ll"
{ /* Octal escape sequence. */
	  int result;
	  std::sscanf(yytext + 1, "%o", &result);
	  if (result > 0xff) {
      BEGIN(INITIAL);
      throw mli::database_parser::syntax_error(yylloc,
        "String octal escape " + the_text + " is out-of-bounds, must be ≤ \\ 377.");
    }
	  yylval.text += (char)result;
	}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 667 "../../mli-root/src/database-lexer.ll"
{ /* Hexadecimal escape sequence. */
	  int result;
	  std::sscanf(yytext + 2, "%x", &result);
	  if (result > 0xff) {
      // Can actually not get here, as scanning for max 2 hex digits!
      BEGIN(INITIAL);
      throw mli::database_parser::syntax_error(yylloc,
        "String hexadecimal escape " + the_text + " is out-of-bounds, must be ≤ \\xff.");
    }
	  yylval.text += (char)result;
	}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 679 "../../mli-root/src/database-lexer.ll"
{ /* Hexadecimal escape sequence to give UTF-8 characters. */
    yylval.text += to_utf8(std::stoul(yytext + 2, nullptr, 16));
	}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 683 "../../mli-root/src/database-lexer.ll"
{
    BEGIN(INITIAL);
    throw mli::database_parser::syntax_error(yylloc,
      "Bad string escape sequence " + the_text);
  }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 689 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\\'; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 690 "../../mli-root/src/database-lexer.ll"
{ ; /* Non-character, used to delimit numeric escapes */ }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 692 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\a'; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 693 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\b'; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 694 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\f'; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 695 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\n'; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 696 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\r'; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 697 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\t'; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 698 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\v'; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 700 "../../mli-root/src/database-lexer.ll"
{ yylval.text += the_text; }
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 701 "../../mli-root/src/database-lexer.ll"
{
    BEGIN(INITIAL); yylloc.lines(yyleng); yylloc.step(); line_position = current_position;
    throw mli::database_parser::syntax_error(yylloc, "Newline in string.");
  }
	YY_BREAK


case 166:
YY_RULE_SETUP
#line 709 "../../mli-root/src/database-lexer.ll"
{ yyless(0); BEGIN(INITIAL); maybe_set_declaration_context = false; }
	YY_BREAK

case 167:
YY_RULE_SETUP
#line 713 "../../mli-root/src/database-lexer.ll"
{ logic_prefix_count = 1; BEGIN(logic_prefix); }
	YY_BREAK

case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 716 "../../mli-root/src/database-lexer.ll"
{}    /* Eat the whitespace. */
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 717 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::prefix_not_key; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 718 "../../mli-root/src/database-lexer.ll"
{ get_text; ++logic_prefix_count; return mli::database_parser::token::prefix_or_key; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 719 "../../mli-root/src/database-lexer.ll"
{ get_text; ++logic_prefix_count; return mli::database_parser::token::prefix_and_key; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 720 "../../mli-root/src/database-lexer.ll"
{ get_text; ++logic_prefix_count; return mli::database_parser::token::prefix_implies_key; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 721 "../../mli-root/src/database-lexer.ll"
{ get_text; ++logic_prefix_count; return mli::database_parser::token::prefix_equivalent_key; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 722 "../../mli-root/src/database-lexer.ll"
{
    get_text;
    --logic_prefix_count;
    if (logic_prefix_count < 1) BEGIN(INITIAL);

    auto x = mli::symbol_table.find(yylval.text);

    if (!x) {
      BEGIN(INITIAL);
      throw mli::database_parser::syntax_error(yylloc,
        "Logic prefix variable " + yylval.text + " is not declared.");
    }

    mli::variable* vp = mli::ref_cast<mli::variable*>(x->second);

    // Check if it is a variable which is declared without definition, in which case make
    // a copy with right proof depth, insert it in the symbol table, and change x->second
    // so subsequently the new copy is used instead of the original lookup value.
    if (vp != nullptr && vp->depth_ == -1) {
      mli::ref<mli::variable> v(make, *vp);
      v->depth_ = proof_depth;
      symbol_table.insert_or_assign(yylval.text, {x->first, v});

      x->second = v;
    }

    if (x->first != mli::database_parser::token::object_formula_variable) {
      BEGIN(INITIAL);
      throw mli::database_parser::syntax_error(yylloc,
        "Logic prefix variable " + yylval.text + " is not of type formula.");
    }
    yylval.object = x->second;
    yylval.number = x->first;
    return mli::database_parser::token::prefix_formula_variable;
  }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 757 "../../mli-root/src/database-lexer.ll"
{
    BEGIN(INITIAL);
    throw mli::database_parser::syntax_error(yylloc,
      "Logic prefix expression is inconsistent.");
  }
	YY_BREAK

case 176:
YY_RULE_SETUP
#line 765 "../../mli-root/src/database-lexer.ll"
{ yylval.text.clear(); BEGIN(C_string); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 768 "../../mli-root/src/database-lexer.ll"
{ yy_push_state(line_comment); }
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 770 "../../mli-root/src/database-lexer.ll"
{ yy_pop_state(); yylloc.lines(1); yylloc.step(); line_position = current_position; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 773 "../../mli-root/src/database-lexer.ll"
{ yy_push_state(block_comment); }
	YY_BREAK
/* Block comments. */
case 180:
YY_RULE_SETUP
#line 776 "../../mli-root/src/database-lexer.ll"
{ yy_pop_state(); /* End of the comment. */ }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 778 "../../mli-root/src/database-lexer.ll"
{ yy_push_state(block_comment); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 780 "../../mli-root/src/database-lexer.ll"
{}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 781 "../../mli-root/src/database-lexer.ll"
{ yylloc.lines(yyleng); yylloc.step(); line_position = current_position; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 782 "../../mli-root/src/database-lexer.ll"
{ /* Stray characters ignored, including — and [. */ }
	YY_BREAK
case YY_STATE_EOF(block_comment):
#line 784 "../../mli-root/src/database-lexer.ll"
{
    BEGIN(INITIAL);
    throw mli::database_parser::syntax_error(yylloc,
      "Nested comments not properly closed at end of file.");
  }
	YY_BREAK

case 185:
YY_RULE_SETUP
#line 791 "../../mli-root/src/database-lexer.ll"
{
  BEGIN(INITIAL);
  throw mli::database_parser::syntax_error(yylloc,
    "No block comment open [— earlier to match the close —] at this location.");
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 798 "../../mli-root/src/database-lexer.ll"
{ yylloc.step();
    int r = directive_read(yyin, yylloc);

    if (r != 0) {
      BEGIN(INITIAL);
      return mli::database_parser::token::MLIerror;
    }
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 808 "../../mli-root/src/database-lexer.ll"
{
  BEGIN(INITIAL);
  throw mli::database_parser::syntax_error(yylloc, "No directive open {— to match the close —}.");
}
	YY_BREAK

case 188:
YY_RULE_SETUP
#line 815 "../../mli-root/src/database-lexer.ll"
{ /* Closing quote - all done. */ BEGIN(INITIAL); return mli::database_parser::token::plain_name; }
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 816 "../../mli-root/src/database-lexer.ll"
{
    BEGIN(INITIAL); yylloc.lines(yyleng); yylloc.step(); line_position = current_position;
    throw mli::database_parser::syntax_error(yylloc, "Unterminated C-string.");
  }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 821 "../../mli-root/src/database-lexer.ll"
{ /* Octal escape sequence. */
	  int result;
	  std::sscanf(yytext + 1, "%o", &result);
	  if (result > 0xff) {
      BEGIN(INITIAL);
      throw mli::database_parser::syntax_error(yylloc,
        "String octal escape " + the_text + " is out-of-bounds, must be ≤ \\377.");
    }
	  yylval.text += (char)result;
	}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 832 "../../mli-root/src/database-lexer.ll"
{ /* Hexadecimal escape sequence. */
	  int result;
	  std::sscanf(yytext + 2, "%x", &result);
	  if (result > 0xff) {
      BEGIN(INITIAL);
      throw mli::database_parser::syntax_error(yylloc,
        "String hexadecimal escape " + the_text + " is out-of-bounds, must be ≤ \\xff.");
    }
	  yylval.text += (char)result;
	}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 843 "../../mli-root/src/database-lexer.ll"
{
    BEGIN(INITIAL);
    throw mli::database_parser::syntax_error(yylloc,
      "Bad string escape sequence " + the_text);
  }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 849 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\\'; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 850 "../../mli-root/src/database-lexer.ll"
{ ; /* Non-character, used to delimit numeric escapes */ }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 852 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\a'; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 853 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\b'; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 854 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\f'; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 855 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\n'; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 856 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\r'; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 857 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\t'; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 858 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\v'; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 860 "../../mli-root/src/database-lexer.ll"
{ yylval.text += yytext[1]; }
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 861 "../../mli-root/src/database-lexer.ll"
{ yylval.text += yytext[1]; yylloc.lines(yyleng); yylloc.step(); line_position = current_position; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 862 "../../mli-root/src/database-lexer.ll"
{ /* " */ yylval.text += the_text; }
	YY_BREAK

case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 866 "../../mli-root/src/database-lexer.ll"
{ get_text;
  throw mli::database_parser::syntax_error(yylloc, "invalid character \"" + yylval.text + "\""); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 869 "../../mli-root/src/database-lexer.ll"
{ std::stringstream ss;
        ss << std::hex << std::uppercase << (unsigned)(unsigned char)yytext[0] << "ₓ";
        throw mli::database_parser::syntax_error(yylloc, "invalid byte " + ss.str()); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(line_comment):
case YY_STATE_EOF(directive):
case YY_STATE_EOF(any_identifier):
case YY_STATE_EOF(C_string):
case YY_STATE_EOF(find_set_variable):
case YY_STATE_EOF(find_vertical_line):
case YY_STATE_EOF(include_file):
case YY_STATE_EOF(logic_prefix):
#line 873 "../../mli-root/src/database-lexer.ll"
{
  if (include_stack.empty())
    return EOF;

  delete yyin.rdbuf();

  yy_delete_buffer(YY_CURRENT_BUFFER);
  yy_switch_to_buffer(include_stack.top());
  include_stack.pop();

  yylloc = location_stack.top();
  location_stack.pop();

  current_position = current_position_stack.top();
  current_position_stack.pop();

  line_position = line_position_stack.top();
  line_position_stack.pop();

  yylloc.step();

  std::cout << "End reading " << filename_stack.top();
  if (filename_stack.top() != filepath_stack.top())
    std::cout << " (" << filepath_stack.top() << ")";
  std::cout << std::endl;

  filename_stack.pop();
  filepath_stack.pop();

  std::cout << "Continue reading " << yylloc << std::endl;
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 905 "../../mli-root/src/database-lexer.ll"
ECHO;
	YY_BREAK
#line 3597 "../../mli-root/src/database-lexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 65);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 755 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 65;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 755 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 754);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 905 "../../mli-root/src/database-lexer.ll"



