#line 1 "../../mli-root/src/database-lexer.cc"

#line 3 "../../mli-root/src/database-lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer mliFlexLexer

#ifdef yyalloc
#define mlialloc_ALREADY_DEFINED
#else
#define yyalloc mlialloc
#endif

#ifdef yyrealloc
#define mlirealloc_ALREADY_DEFINED
#else
#define yyrealloc mlirealloc
#endif

#ifdef yyfree
#define mlifree_ALREADY_DEFINED
#else
#define yyfree mlifree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int mli::database_lexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 209
#define YY_END_OF_BUFFER 210
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[757] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    4,    4,
        0,    0,  210,  208,    1,    2,    1,  124,  178,  207,
       87,   88,  126,   66,  127,   67,  122,  140,   65,   68,
       69,   77,   70,  146,  146,  146,   93,  123,   94,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,   97,   98,   99,  100,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  209,  209,  180,  184,  185,  186,  186,  166,
      167,  166,  166,  206,  191,  190,  209,  168,  101,  102,

      146,  168,  168,  168,  168,  106,  103,  104,  105,  106,
        5,    4,    5,  177,  170,  170,  172,  176,  174,  175,
      173,  171,  177,  177,  177,  177,  177,    1,    0,    2,
      141,  140,  147,  146,  146,  146,    0,  146,  146,  146,
      146,   21,  146,  146,  146,  132,  146,  146,  146,  146,
      146,  146,  128,   37,  146,  146,  146,  146,  146,   25,
      146,  146,  146,  146,  146,  146,  146,  146,  146,    0,
      207,   64,   84,  144,  169,  146,  146,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  180,  184,  185,

        0,    0,  158,  153,  156,    0,  157,  159,  160,  161,
      162,  163,  164,  165,    0,    0,    0,  206,  204,  205,
      196,  192,  194,  195,  197,  198,  199,  200,  201,  202,
      203,  204,  101,    0,  102,  146,  146,  146,    0,    0,
        0,    0,  103,    0,  104,    0,    0,    0,    5,    4,
        5,    0,  170,  171,  176,  176,    0,    0,    0,    0,
        0,    0,  108,  107,    0,   26,  146,  146,  146,  146,
      146,  146,  146,  146,  146,    7,  146,  134,  146,  146,
      146,  146,  146,  146,  146,   27,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  138,   38,  146,    0,    0,

        0,    0,    0,    1,  179,  148,   85,  207,   89,   90,
      142,  207,   91,   92,   86,  146,  146,  146,  146,  146,
       81,   60,   59,   61,   50,  112,   51,  109,  110,  111,
       20,  115,   79,   80,   62,   63,  114,  113,   39,   40,
       41,   78,   29,   30,   31,   71,   72,   73,   74,   75,
       76,  118,  120,  119,  121,   28,   24,  117,  116,  125,
       95,   96,   82,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  153,
      155,  154,    0,  150,  149,  192,  194,  193,    0,  148,
      146,  146,  146,  146,  146,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  105,    5,  176,  176,
      176,  176,  176,  174,  175,  173,  172,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  181,   56,
      146,  146,  146,   49,  146,  146,  146,  146,  146,  130,
       33,  146,  146,  146,  146,  146,  146,  133,  146,  146,
      146,  146,  146,  146,  146,  146,   12,  146,  129,  146,
      146,  146,  188,  144,    0,  187,  189,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,   83,  146,  146,  146,  146,  183,

      182,  153,  155,  154,  151,  152,  192,  193,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,    0,   11,  135,  139,  146,  146,
      146,  146,  146,  146,  146,    0,  146,  146,    3,   15,
      146,  146,  146,  146,  146,  146,   19,  146,  146,  146,
      146,  137,  131,  145,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
        0,    0,    0,    0,  155,    0,  146,  146,  146,  146,

      146,  146,  146,    0,    0,  146,  146,  146,  146,   48,
      146,  146,  146,  146,   22,  146,  146,    9,  142,  143,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  155,    0,  146,  146,  146,
      146,  146,    0,   44,    0,   36,  146,    6,  146,  146,
      146,  146,   23,  146,   34,   17,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  155,    0,  146,   58,
      136,  146,  146,    0,    0,   35,   52,  146,  146,  146,
      146,  146,  155,    0,  146,   18,  146,    0,    0,    0,
      146,  146,   10,   53,  146,  155,    0,   13,   14,    0,

        0,    0,    0,  146,  146,    0,  146,  155,    0,    0,
        0,    0,    0,   42,  146,    0,    0,   16,    0,    0,
        0,    0,    0,  146,    0,    0,   46,    8,    0,    0,
        0,   54,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   43,    0,    0,    0,    0,   57,
       47,    0,    0,   55,   45,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    7,    7,    8,    7,    9,
       10,    7,   11,   12,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   17,   17,   18,   19,   20,
       21,   22,   23,   23,   24,   25,   26,   25,   27,   25,
       28,   28,   28,   28,   29,   28,   28,   30,   28,   31,
       28,   28,   32,   28,   33,   28,   28,   28,   28,   28,
       34,   35,   36,   23,   23,   23,   37,   38,   39,   40,

       41,   42,   28,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   28,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
       99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
      109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
      119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
      129,    1,    1,  130,  131,  131,  132,  131,  131,  131,

      131,  131,  131,  133,  131,  134,  135,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  136,  137,  138,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  139,  137,  137,  140,
      141,  141,  141,  142,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[143] =
    {   0,
        1,    2,    3,    2,    1,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    5,    6,    6,    6,
        6,    6,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    8,    9,    6,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        6,    6,    6,    6,    6,   10,   10,   10,   10,   10,
       11,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   12,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,    1,
        1,    1,    1,    1,    1,    1,    1,   14,    1,    1,
        1,    1
    } ;

static const flex_int16_t yy_base[798] =
    {   0,
        0,    0,    0,    0, 3392, 3388,  140,  141,    0,    0,
      142,  143,  144,  145,  280,  419,  150,  153,  156,  161,
      558,  697, 3387, 5277,  164, 3380,  203, 5277, 5277, 5277,
     5277, 5277,  153, 5277,  155, 5277, 5277,  165, 5277, 5277,
     5277, 5277, 5277,  167,  169,  172, 3244, 5277, 5277,  174,
      177,  181,  184,  179,  205,  194,  200,  222,  235,  248,
      240,  231,  258,  192,  186,  251, 3241, 5277, 5277, 5277,
      232,    0, 3311,  772,  290,    0,    0,  314,    0, 3280,
        0,  358, 5277, 3371, 5277,    0, 3356, 3220, 3287, 5277,
     5277,  481, 3286,    0, 5277, 5277,  617, 5277,  258, 3339,

        0,  819,  437,  203, 3234, 5277,  343, 3320, 5277,  229,
        0,  295,  415, 5277,  348,  364, 5277, 5277, 5277, 5277,
     5277, 5277, 3210,  866,  692,  301, 3219,  390,  210, 3310,
      299,  327,    0,  337,  382,  386, 3231,  353,  437,  477,
      474,  384,  467,  525,  484,  390,  479,  527,  529,  515,
      531,  577,  396,  605,  533,  607,  612,  614,  547,  553,
      619,  621,  623,  631,  625,  634,  629,  644,  663, 3228,
     5277, 5277, 5277,   76, 5277,  441,  445,    0,    0,  714,
      698,  930,  948, 3187,  600, 1001,  998,  696,  626,  584,
     3215,    0,    0, 1032,    0,    0, 3284, 5277,    0, 3269,

     3205, 3182, 5277,  686,  688, 1105, 5277, 5277, 5277, 5277,
     5277, 5277, 5277, 5277, 1124, 3199,  614,    0, 5277, 5277,
     5277,  694,  696, 5277, 5277, 5277, 5277, 5277, 5277, 5277,
     5277, 1143,  525,  648, 3259,    0,  582,  584, 1103, 3161,
     1130, 1107,  789,  665, 3239, 1181, 3119, 3110,    0,  774,
      973, 3152,  795, 5277, 5277, 5277, 1190,  160,  665, 1227,
     1255, 3029,  785,  788, 3014,  812,  963,  916,  996, 1006,
     1032, 1001, 1003, 1020, 1063,  817, 1035, 1075, 1117, 1187,
     1139, 1171, 1212, 1214, 1120,  912, 1218, 1221, 1246, 1282,
     1262, 1300, 1203, 1318, 1078,  914, 1061, 1199, 2910, 1172,

     2921, 1286, 1350, 1289,  113, 5277, 5277,  162, 5277, 5277,
     2849, 2836, 5277, 5277, 5277,  245,  257,  342,  543,  654,
     5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277,
     5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277,
     5277, 5277, 5277, 5277, 2812, 5277, 5277, 5277, 5277, 5277,
     5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277,
     5277, 5277, 5277,    0, 1404, 1468, 1532, 1596, 1660, 1724,
     1788, 1780, 1844, 1908, 1276,    0,    0, 2851, 2886, 1070,
     1415, 2022, 1044, 5277, 5277, 1136, 1320, 2028, 1375, 5277,
      675,  836,  950, 1200, 1226, 2005, 2069, 2133, 2197, 2261,

     2324, 2388, 2380, 2444, 2508, 2572, 5277, 2855, 5277, 5277,
     5277, 5277, 5277, 5277, 5277, 5277, 5277, 2594, 2658, 2722,
     2786, 2850, 2913, 2977, 2969, 3033, 3097, 3161, 5277, 3247,
     3250, 3253, 3257, 3273, 3276, 3279, 3299, 3302, 3305, 3308,
     3324, 3328, 3334, 3344, 3353, 3360, 3364, 3369, 3386, 3390,
     3394, 3410, 3414, 3417, 3436, 3440, 3444, 3460, 3463, 3466,
     3486, 3489, 5277,  428, 3390, 5277, 5277, 1312, 2789, 2765,
     2753, 2747, 2650, 2583, 2532, 2525, 2474, 2467, 2416, 2286,
     2255, 2245, 1256, 2216, 2208, 2193, 1257, 2132, 1260, 1296,
     2127, 2104, 2016, 1917, 1290, 1286, 1259, 1246, 1225, 5277,

     5277, 1442, 3498, 5277, 5277, 5277, 1444, 5277, 1217, 1199,
     1902, 1166, 1162, 1157, 1903, 1150, 1918, 2090, 1147, 1140,
     1135, 1131, 1124, 1121, 1099, 1093, 5277, 5277, 5277, 5277,
     5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277, 5277,
     5277, 5277, 5277, 5277, 3282, 3525, 3529, 3545, 3548, 3551,
     3554, 3573, 3577, 3580, 3596, 3602, 3606, 3612, 3615, 3622,
     3631, 3638, 3654, 3657, 3660, 3663, 3680, 3684, 3690, 3708,
     3711, 3716, 3719,  891, 3636, 3694, 3706, 3714, 1376, 3707,
     1382, 3720, 1132, 1131, 1968, 5277, 1110, 1101, 1059, 1040,
     1010,  988,  979,  974, 3811, 1023, 3830, 3838, 3841, 3857,

     3860, 3727, 3863, 1007,  998, 3866, 3886, 3889, 3905, 3908,
     3915, 3931, 3934, 3937, 3941, 3957, 3960, 3963,  900,  896,
     3372, 3943, 3959, 3922, 4019, 4023, 4087,  932, 2148, 2149,
     2313, 2151, 2246, 2726, 2729, 4177,  955, 4193, 4196, 4204,
     4220, 4223, 3420, 3967,  925, 5277, 4226, 4230, 4252, 4255,
     4260, 4276, 4280, 4285, 4301, 4304, 4275, 4287, 4351, 4363,
     3673, 4383, 4447, 4447, 4511, 4511, 4625,  875, 4641, 4307,
     4310, 4644, 4652,  776, 4002, 5277, 4668, 4671, 4674, 4679,
     4695, 4705, 4713,  793, 4729, 4740, 4756,  770,  768, 4722,
     4760, 4764, 4780, 4783, 4806, 4800,  743, 4816, 4827,  719,

      681,  670,  669, 4832, 4843, 4811, 4849, 5277,  621,  624,
      602,  604,  596, 4859, 4868,  593,  595, 4875,  586,  529,
      530,  485,  491, 4879,  468,  449, 5277, 5277,  450,  437,
      451, 4884,  431,  411,  403,  373,  341,  321,  335,  248,
      222,  219,  216,  211, 5277,  169,  179,  155,  152, 5277,
     5277,  137,  146, 5277, 5277, 5277, 4923, 4937, 4951, 4965,
     4979, 4993, 5007, 5021, 5035, 2252, 2841, 5040, 2815, 5044,
     2917, 5053, 5057, 5070, 5084, 5097, 5111,  166, 5125, 5139,
     2979, 3328, 5144, 5148, 5152, 5156, 5169, 5183, 5196,  154,
     5210, 5224, 5238, 3444, 5243, 5256, 5269

    } ;

static const flex_int16_t yy_def[798] =
    {   0,
      756,    1,  757,  757,  758,  758,  759,  759,  757,  757,
      760,  760,  761,  761,  762,  762,  763,  763,  764,  764,
      765,  765,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  766,  756,  756,
      756,  756,  756,  767,  767,  767,  756,  756,  756,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  756,  756,  756,  756,
      768,  768,  768,  756,  768,  769,  770,  770,  771,  772,
      773,  756,  756,  774,  756,  775,  756,  756,  756,  756,
      756,  756,  756,  776,  756,  756,  777,  756,  756,  756,

      778,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      779,  756,  780,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  781,  781,  782,  782,  782,  756,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  756,
      756,  756,  756,  756,  756,  756,  756,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  784,  784,  785,  786,  787,  756,  788,  756,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  789,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  790,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  791,  756,
      792,  793,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  794,  794,  756,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  756,  756,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  795,  756,  756,  756,  756,  756,  756,
      795,  795,  756,  756,  795,  795,  795,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,

      756,  756,  756,  756,  756,  756,  756,  796,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  756,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  797,  797,  797,  797,

      797,  797,  797,  756,  756,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  797,  797,  797,
      797,  797,  756,  797,  756,  756,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  797,  797,
      797,  797,  797,  756,  756,  756,  797,  797,  797,  797,
      797,  797,  756,  756,  797,  797,  797,  756,  756,  756,
      797,  797,  797,  797,  797,  756,  756,  797,  797,  756,

      756,  756,  756,  797,  797,  756,  797,  756,  756,  756,
      756,  756,  756,  797,  797,  756,  756,  797,  756,  756,
      756,  756,  756,  797,  756,  756,  756,  756,  756,  756,
      756,  797,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,    0,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756

    } ;

static const flex_int16_t yy_nxt[5420] =
    {   0,
       24,   25,   26,   27,   28,   29,   30,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   38,   39,   40,   41,
       42,   43,   30,   44,   44,   44,   44,   44,   44,   44,
       45,   46,   44,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   44,   56,   44,   44,   57,   58,   59,   60,
       61,   44,   62,   63,   64,   65,   44,   66,   44,   44,
       67,   68,   69,   70,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   71,
       72,   73,   72,   74,   75,   76,   77,   78,   79,   80,
       81,   82,   87,   87,   91,   91,   95,   95,  466,   96,
       96,  107,  108,  107,  107,  108,  107,  112,  112,  112,
      236,  113,  112,  112,  112,  128,  113,  128,  131,  131,
      131,  131,  236,   88,   88,  467,   92,   92,   97,   97,
      132,  132,  133,  133,  133,  133,  755,  133,  133,  133,
      133,  754,  133,  133,  133,  133,  133,  133,  753,  133,

      133,  133,  133,  752,  128,  300,  128,  133,  133,  133,
      133,  109,  136,  301,  109,  133,  133,  143,  135,  751,
      133,  133,  138,  750,  145,  147,   83,  148,  139,  141,
      144,   83,  140,  146,  166,  153,  142,  133,  133,  168,
      155,  149,  154,  414,  167,  415,  133,  133,  749,  156,
      133,  133,  748,   83,  150,  133,  133,  151,   83,  233,
      152,  233,  157,  133,  133,  747,  133,  133,  239,  240,
      746,  163,  241,  133,  133,  261,  262,   89,   89,   93,
       93,   99,  100,   99,  158,  159,  164,  110,  745,  161,
      110,  468,  162,  169,  246,  247,  250,  250,  250,  469,

      160,  129,  248,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  165,  131,  131,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      129,  172,  132,  132,  243,  173,  243,  174,  174,  253,
      253,  253,  133,  133,  174,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  253,  253,  253,  133,  133,
      257,  744,  177,  258,  259,  743,  177,  177,  742,  180,
      181,  182,  472,  183,  473,  184,  185,  186,  187,  188,
      189,  128,  266,  128,  474,  234,  475,  133,  133,  133,

      133,  133,  133,  177,  177,  133,  133,  176,  177,  741,
      190,  133,  133,  102,  103,  191,  252,  104,  252,  105,
       99,  100,   99,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  263,
      264,  740,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  133,  133,  739,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  474,
      244,  475,  133,  133,  738,  252,  267,  737,  203,  133,
      133,  736,  133,  133,  133,  133,  204,  205,  735,  133,

      133,  734,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  252,  206,  269,  207,  733,  208,  209,  238,
      268,  270,  210,  238,  238,  274,  233,  129,  233,  211,
      133,  133,  275,  212,  731,  213,  206,  214,  730,  215,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      238,  238,  102,  103,  237,  238,  104,  300,  105,  115,
      116,  115,  133,  133,  271,  301,  276,  278,  133,  133,
      729,  279,  277,  272,  302,  303,  728,  273,  302,  303,
      283,  117,  118,  119,  120,  118,  121,  122,  118,  118,
      118,  287,  133,  133,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  216,  220,
      133,  133,  133,  133,  221,  280,  727,  133,  133,  133,
      133,  726,  222,  223,  133,  133,  133,  133,  133,  133,
      133,  133,  725,  281,  133,  133,  133,  133,  723,  133,
      133,  224,  722,  225,  226,  282,  284,  721,  227,  133,
      133,  289,  234,  293,  720,  228,  285,  719,  286,  229,
      290,  230,  288,  231,  294,  232,  291,  292,  133,  133,
      476,  322,  477,  323,  297,  324,  295,  123,  296,  361,
      362,  124,  125,  358,  359,  126,  360,  127,  115,  116,

      115,  380,  205,  205,  205,  713,  298,  384,  385,  386,
      387,  387,  387,  389,  240,  302,  303,  302,  303,  712,
      117,  118,  119,  120,  118,  121,  122,  118,  118,  118,
      246,  247,  711,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  352,  353,  416,
      417,  354,  355,  710,  256,  250,  250,  250,  256,  256,
      709,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      243,  478,  243,  479,  304,  356,  253,  253,  253,  305,

      133,  133,  357,  133,  133,  256,  256,  306,  701,  255,
      256,  174,  472,  307,  473,  174,  174,  174,  174,  174,
      174,  308,  308,  700,  309,  310,  123,  133,  133,  697,
      124,  125,  133,  133,  126,  688,  127,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  171,  176,  176,  176,  176,  176,  176,  176,  171,
      171,  171,  171,  171,  171,  171,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,

      177,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  684,  237,
      237,  237,  237,  237,  237,  237,  244,  133,  133,  133,
      133,  133,  133,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  431,  255,  255,  255,  255,
      255,  255,  255,  474,  252,  475,  252,  676,  133,  133,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  311,  311,  311,  311,  311,

      311,  311,  311,  311,  311,  312,  312,  668,  313,  314,
      430,  133,  133,  657,  315,  316,  133,  133,  133,  133,
      468,  133,  133,  317,  318,  319,  316,  320,  469,  318,
      319,  318,  432,  471,  316,  133,  133,  470,  316,  316,
      318,  319,  316,  252,  433,  435,  646,  133,  133,  316,
      133,  133,  438,  319,  436,  437,  645,  318,  319,  637,
      317,  318,  318,  439,  318,  317,  325,  326,  635,  327,
      252,  328,  434,  634,  329,  330,  133,  133,  133,  133,
      331,  441,  633,  339,  340,  502,  205,  474,  332,  475,
      133,  133,  341,  133,  133,  342,  343,  344,  345,  346,

      347,  333,  334,  440,  632,  335,  336,  337,  338,  348,
      349,  350,  351,  365,  366,  367,  368,  369,  370,  371,
      381,  381,  442,  372,  373,  374,  375,  461,  381,  381,
      381,  381,  133,  133,  631,  133,  133,  505,  506,  382,
      382,  381,  381,  381,  381,  381,  381,  382,  382,  382,
      382,  507,  387,  630,  133,  133,  449,  443,  388,  388,
      382,  382,  382,  382,  382,  382,  388,  388,  388,  388,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  388,
      388,  388,  388,  388,  388,  445,  133,  133,  396,  397,
      398,  399,  400,  401,  402,  629,  390,  391,  403,  404,

      405,  406,  133,  133,  628,  392,  393,  394,  391,  395,
      395,  393,  394,  393,  133,  133,  391,  625,  133,  133,
      391,  391,  393,  394,  391,  444,  446,  133,  133,  133,
      133,  391,  594,  133,  133,  394,  133,  133,  594,  393,
      394,  458,  392,  393,  393,  462,  393,  392,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  409,  450,  447,
      593,  133,  133,  593,  448,  410,  411,  412,  409,  413,
      592,  411,  412,  411,  592,  451,  409,  133,  133,  591,
      409,  409,  411,  412,  409,  452,  591,  464,  464,  589,
      128,  409,  128,  453,  464,  412,  589,  133,  133,  411,

      412,  588,  410,  411,  411,  588,  411,  410,  418,  419,
      420,  421,  422,  423,  424,  133,  133,  456,  425,  426,
      427,  428,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  454,  455,  133,  133,  387,  387,  476,  587,  477,
      457,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  587,  499,  499,  499,
      499,  499,  499,  478,  594,  479,  459,  460,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  594,  237,  237,  237,  237,
      237,  237,  237,  478,  474,  479,  590,  476,  593,  477,

      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  593,  129,  574,  574,  592,
      503,  503,  238,  472,  574,  473,  238,  238,  503,  503,
      503,  503,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  503,  503,  503,  503,  503,  503,  205,  205,  387,
      387,  621,  622,  238,  238,  623,  624,  237,  238,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  482,  482,  482,  482,  482,

      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  320,  320,  320,
      320,  320,  320,  320,  171,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  485,

      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  318,  171,  318,  171,  171,
      171,  318,  171,  171,  318,  318,  171,  171,  318,  318,
      318,  318,  171,  318,  318,  318,  318,  318,  318,  318,
      318,  317,  317,  317,  317,  171,  317,  171,  317,  317,
      317,  317,  317,  317,  317,  171,  317,  317,  317,  317,
      171,  317,  317,  317,  317,  317,  317,  486,  486,  486,
      487,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,

      486,  486,  486,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  319,
      319,  171,  319,  319,  319,  319,  171,  171,  319,  319,
      319,  319,  319,  319,  319,  319,  171,  319,  319,  319,
      319,  319,  319,  319,  171,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  316,  316,  171,  316,  316,  316,  316,  171,  316,
      316,  316,  316,  316,  171,  316,  171,  171,  171,  316,

      316,  316,  316,  316,  316,  316,  171,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      171,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  495,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  171,  494,  494,  494,
      494,  494,  494,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  171,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  171,  497,  497,  497,  497,  497,

      497,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  171,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  504,  504,  478,
      474,  479,  590,  508,  508,  504,  504,  504,  504,  626,
      627,  508,  508,  508,  508,  476,  592,  477,  504,  504,
      504,  504,  504,  504,  508,  508,  508,  508,  508,  508,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  510,  510,  510,  510,

      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  395,  395,
      395,  395,  395,  395,  395,  592,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,

      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  393,  472,  393,  473,
      658,  659,  393,  660,  661,  393,  393,  662,  402,  393,
      393,  393,  393,  591,  393,  393,  393,  393,  393,  393,
      393,  393,  392,  392,  392,  392,  133,  392,  133,  392,
      392,  392,  392,  392,  392,  392,  591,  392,  392,  392,
      392,  589,  392,  392,  392,  392,  392,  392,  514,  514,
      514,  515,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      394,  394,  589,  394,  394,  394,  394,  403,  663,  394,
      394,  394,  394,  394,  394,  394,  394,  588,  394,  394,
      394,  394,  394,  394,  394,  588,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  391,  391,  587,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  587,  391,  623,  399,  661,  391,

      391,  391,  391,  391,  391,  391,  586,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,

      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      585,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  584,  522,  522,  522,
      522,  522,  522,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  583,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  582,  524,  524,  524,  524,  524,

      524,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  581,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  580,  526,  526,  526,  526,  526,  526,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,

      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  413,  413,  413,
      413,  413,  413,  413,  579,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,

      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  411,  578,  411,  664,  665,
      577,  411,  666,  406,  411,  411,  178,  178,  411,  411,
      411,  411,  576,  411,  411,  411,  411,  411,  411,  411,
      411,  410,  410,  410,  410,  134,  410,  134,  410,  410,
      410,  410,  410,  410,  410,  575,  410,  410,  410,  410,
      408,  410,  410,  410,  410,  410,  410,  532,  532,  532,
      533,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  534,  534,  534,  534,  534,  534,  534,

      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  412,
      412,  501,  412,  412,  412,  412,  192,  192,  412,  412,
      412,  412,  412,  412,  412,  412,  500,  412,  412,  412,
      412,  412,  412,  412,  480,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  409,  409,  471,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  133,  409,  133,  470,  465,  409,  409,
      409,  409,  409,  409,  409,  463,  536,  536,  536,  536,

      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  429,

      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  128,  540,  540,  540,  540,
      540,  540,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  408,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  407,  542,  542,  542,  542,  542,  542,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,

      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  243,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  245,  544,  544,  544,  544,  544,  544,  545,  545,
      545,  756,  756,  756,  756,  756,  756,  233,  756,  756,
      756,  235,  133,  133,  383,  133,  133,  379,  133,  133,
      378,  200,  133,  133,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  545,  545,  545,  198,  363,  133,  133,
      321,  133,  133,  299,  133,  133,  265,  546,  547,  548,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  130,  260,  133,  133,  549,  133,  133,  254,
      133,  133,  245,  133,  133,  756,  756,  756,  242,  756,
      756,  756,  134,  550,  134,  556,  556,  556,  596,  133,
      133,  235,  551,  133,  133,  756,  756,  756,  552,  133,
      133,  217,  202,  553,  756,  756,  756,  201,  200,  133,
      133,  756,  756,  756,  554,  756,  756,  756,  133,  133,
      756,  756,  756,  198,  194,  133,  133,  175,  170,  133,
      133,  137,  130,  555,  133,  133,  756,  756,  756,  756,
       85,  756,  756,  756,   85,  756,  756,  756,  557,  756,

      560,  133,  133,  756,  756,  133,  133,  756,  558,  133,
      133,  756,  756,  756,  559,  756,  756,  756,  756,  756,
      756,  643,  643,  643,  756,  133,  133,  561,  563,  133,
      133,  756,  133,  133,  756,  756,  562,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  134,  564,
      134,  133,  133,  565,  756,  133,  133,  566,  567,  133,
      133,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  674,  756,  133,  133,  756,  133,  133,
      756,  133,  133,  756,  756,  568,  569,  756,  756,  756,
      756,  756,  756,  391,  391,  756,  391,  391,  391,  391,

      570,  133,  133,  464,  133,  133,  756,  464,  464,  464,
      464,  464,  464,  595,  595,  756,  756,  756,  571,  756,
      756,  595,  595,  595,  595,  756,  756,  756,  756,  573,
      756,  756,  756,  756,  595,  595,  595,  595,  595,  595,
      133,  133,  756,  572,  133,  133,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      133,  133,  756,  133,  133,  756,  133,  133,  756,  133,
      133,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  597,  598,  133,  133,
      756,  756,  133,  133,  756,  133,  133,  756,  756,  756,

      756,  756,  599,  556,  556,  556,  756,  756,  756,  756,
      756,  133,  133,  756,  756,  756,  756,  756,  756,  600,
      601,  133,  133,  756,  756,  756,  602,  133,  133,  756,
      133,  133,  756,  756,  756,  756,  756,  133,  133,  756,
      756,  756,  603,  604,  756,  605,  133,  133,  756,  606,
      756,  607,  756,  133,  133,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  133,
      133,  756,  133,  133,  756,  133,  133,  756,  133,  133,
      608,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      609,  756,  756,  756,  756,  133,  133,  756,  612,  133,

      133,  756,  756,  611,  756,  133,  133,  756,  610,  756,
      756,  756,  756,  756,  756,  756,  613,  756,  756,  756,
      756,  756,  756,  133,  133,  756,  133,  133,  643,  643,
      643,  133,  133,  756,  133,  133,  756,  614,  516,  516,
      516,  516,  133,  133,  615,  756,  756,  756,  616,  574,
      756,  617,  756,  574,  574,  574,  574,  574,  574,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  756,
      618,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  391,  392,  393,  756,  756,  756,  756,  393,  756,
      393,  756,  391,  756,  756,  756,  756,  394,  756,  393,

      391,  756,  394,  756,  391,  391,  756,  756,  391,  756,
      756,  756,  756,  394,  756,  391,  393,  756,  756,  392,
      393,  393,  756,  393,  392,  394,  636,  636,  756,  756,
      394,  756,  756,  756,  636,  636,  636,  636,  756,  756,
      756,  756,  756,  756,  756,  133,  133,  636,  636,  636,
      636,  636,  636,  133,  133,  756,  133,  133,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  133,  133,  756,  133,  133,  756,  133,  133,
      756,  133,  133,  756,  638,  756,  639,  756,  756,  756,
      756,  756,  756,  641,  756,  756,  640,  756,  756,  644,

      756,  133,  133,  756,  133,  133,  756,  756,  756,  756,
      756,  756,  756,  756,  642,  647,  756,  756,  756,  756,
      133,  133,  756,  133,  133,  756,  648,  756,  756,  756,
      133,  133,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  649,  756,  756,  756,  650,  133,  133,  756,  133,
      133,  651,  133,  133,  756,  756,  133,  133,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  652,  675,  675,
      675,  756,  133,  133,  653,  133,  133,  756,  133,  133,
      654,  756,  133,  133,  756,  756,  756,  392,  392,  392,
      392,  756,  392,  392,  392,  392,  655,  392,  392,  392,

      392,  392,  392,  675,  675,  675,  393,  656,  391,  391,
      391,  391,  391,  756,  391,  756,  756,  756,  391,  391,
      391,  391,  391,  391,  391,  756,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  393,  756,  393,  689,  756,  756,  393,  756,
      756,  393,  393,  756,  756,  393,  393,  393,  393,  756,
      393,  393,  393,  393,  393,  393,  393,  393,  392,  392,
      392,  392,  756,  392,  756,  392,  392,  392,  394,  394,
      756,  394,  394,  394,  394,  756,  756,  394,  394,  394,

      394,  394,  394,  394,  394,  756,  394,  394,  394,  394,
      394,  394,  394,  756,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  395,  395,  395,  395,
      395,  395,  395,  756,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  667,  667,  756,  756,  756,  756,  756,  756,

      667,  667,  667,  667,  756,  756,  756,  756,  133,  133,
      756,  133,  133,  667,  667,  667,  667,  667,  667,  133,
      133,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  133,  133,  756,  133,  133,
      756,  133,  133,  756,  671,  133,  133,  756,  669,  756,
      670,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  673,  133,  133,  756,
      133,  133,  672,  756,  677,  133,  133,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  133,  133,  756,  679,  133,  133,  756,  756,  678,

      133,  133,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  680,  756,  133,  133,  756,  133,
      133,  756,  133,  133,  756,  133,  133,  756,  756,  756,
      681,  756,  756,  756,  756,  756,  756,  756,  756,  682,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  512,  512,  512,  512,  512,  512,  512,  512,

      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  519,  519,  519,  519,  519,  519,  519,  519,

      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  521,  756,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  756,
      522,  522,  522,  522,  522,  522,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  756,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  756,  524,  524,

      524,  524,  524,  524,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  756,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      683,  683,  756,  756,  756,  756,  756,  756,  683,  683,
      683,  683,  756,  756,  756,  756,  133,  133,  756,  133,
      133,  683,  683,  683,  683,  683,  683,  133,  133,  690,
      690,  690,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  133,  133,  756,  133,  133,  756,  133,
      133,  756,  756,  685,  133,  133,  756,  756,  756,  756,

      756,  687,  756,  686,  756,  756,  756,  756,  756,  756,
      133,  133,  756,  756,  756,  756,  756,  692,  756,  693,
      133,  133,  756,  690,  690,  690,  691,  756,  696,  696,
      756,  756,  756,  756,  756,  694,  696,  696,  696,  696,
      756,  756,  756,  756,  133,  133,  756,  756,  695,  696,
      696,  696,  696,  696,  696,  133,  133,  756,  756,  756,
      702,  756,  756,  756,  756,  756,  756,  756,  756,  698,
      756,  133,  133,  756,  756,  133,  133,  756,  703,  133,
      133,  756,  756,  756,  706,  706,  706,  756,  756,  756,
      756,  756,  756,  756,  756,  133,  133,  756,  133,  133,

      756,  756,  705,  756,  699,  756,  704,  756,  756,  756,
      756,  756,  706,  706,  706,  708,  708,  756,  756,  756,
      756,  133,  133,  708,  708,  708,  708,  756,  756,  756,
      756,  133,  133,  756,  756,  756,  708,  708,  708,  708,
      708,  708,  133,  133,  756,  756,  756,  133,  133,  716,
      756,  756,  756,  756,  756,  707,  756,  756,  133,  133,
      756,  756,  756,  756,  133,  133,  756,  717,  714,  756,
      756,  756,  756,  756,  133,  133,  756,  756,  756,  715,
      756,  756,  756,  133,  133,  756,  756,  756,  756,  756,
      133,  133,  756,  756,  133,  133,  756,  718,  756,  133,

      133,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  732,
      756,  756,  724,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  171,
      171,  171,  171,  179,  179,  179,  179,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  195,  195,  195,  195,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  199,  199,  756,  199,  199,  199,
      199,  756,  199,  199,  199,  199,  199,  218,  218,  756,

      756,  218,  218,  218,  218,  756,  218,  218,  218,  218,
      218,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  249,  756,  756,  249,  249,
      249,  249,  249,  249,  249,  756,  756,  249,  249,  251,
      251,  756,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  171,  171,  171,  171,  364,  364,  364,
      364,  376,  376,  376,  376,  377,  377,  377,  377,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  199,  199,  756,  199,  199,  199,  199,
      756,  199,  199,  199,  199,  199,  218,  218,  756,  756,

      218,  218,  218,  218,  756,  218,  218,  218,  218,  218,
      249,  756,  756,  249,  249,  249,  249,  249,  249,  249,
      756,  756,  249,  249,  251,  251,  756,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  252,  252,
      756,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  171,  171,  171,  171,  252,  252,  756,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      134,  134,  756,  134,  756,  134,   23,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756
    } ;

static const flex_int16_t yy_chk[5420] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    7,    8,   11,   12,   13,   14,  305,   13,
       14,   17,   17,   17,   18,   18,   18,   19,   19,   19,
      790,   19,   20,   20,   20,   25,   20,   25,   33,   33,
       35,   35,  778,    7,    8,  305,   11,   12,   13,   14,
       38,   38,   44,   44,   45,   45,  753,   46,   46,   50,
       50,  752,   51,   51,   54,   54,   52,   52,  749,   53,

       53,   65,   65,  748,   27,  174,   27,   64,   64,   56,
       56,   17,   46,  174,   18,   57,   57,   52,   45,  747,
       55,   55,   50,  746,   53,   54,   19,   54,   50,   51,
       52,   20,   50,   53,   64,   56,   51,   58,   58,   65,
       57,   55,   56,  258,   64,  258,   62,   62,  744,   57,
       59,   59,  743,   19,   55,   61,   61,   55,   20,   99,
       55,   99,   58,   60,   60,  742,   66,   66,  104,  104,
      741,   62,  104,   63,   63,  129,  129,    7,    8,   11,
       12,   15,   15,   15,   59,   60,   62,   17,  740,   61,
       18,  308,   61,   66,  110,  110,  112,  112,  112,  308,

       60,   25,  110,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   63,  131,  131,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       27,   71,  132,  132,  107,   71,  107,   71,   71,  115,
      115,  115,  134,  134,   71,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,  116,  116,  116,  138,  138,
      126,  739,   75,  126,  126,  738,   75,   75,  737,   78,
       78,   78,  316,   78,  316,   78,   78,   78,   78,   78,
       78,  128,  138,  128,  317,   99,  317,  135,  135,  142,

      142,  136,  136,   75,   75,  146,  146,   75,   75,  736,
       78,  153,  153,   15,   15,   78,  113,   15,  113,   15,
       16,   16,   16,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,  135,
      136,  735,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,  139,  139,  734,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,  318,
      107,  318,  143,  143,  733,  113,  139,  731,   92,  141,
      141,  730,  140,  140,  147,  147,   92,   92,  729,  145,

      145,  726,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  113,   92,  141,   92,  725,   92,   92,  103,
      140,  143,   92,  103,  103,  145,  233,  128,  233,   92,
      150,  150,  147,   92,  723,   92,   92,   92,  722,   92,
      144,  144,  148,  148,  149,  149,  151,  151,  155,  155,
      103,  103,   16,   16,  103,  103,   16,  464,   16,   21,
       21,   21,  159,  159,  144,  464,  148,  150,  160,  160,
      721,  151,  149,  144,  176,  176,  720,  144,  177,  177,
      155,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,  159,  152,  152,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   92,   97,
      154,  154,  156,  156,   97,  152,  719,  157,  157,  158,
      158,  717,   97,   97,  161,  161,  162,  162,  163,  163,
      165,  165,  716,  154,  167,  167,  164,  164,  713,  166,
      166,   97,  712,   97,   97,  154,  156,  711,   97,  168,
      168,  162,  233,  165,  710,   97,  157,  709,  158,   97,
      162,   97,  161,   97,  166,   97,  163,  164,  169,  169,
      319,  185,  319,  185,  168,  185,  166,   21,  167,  190,
      190,   21,   21,  189,  189,   21,  189,   21,   22,   22,

       22,  204,  204,  205,  205,  703,  169,  217,  217,  222,
      222,  223,  223,  234,  234,  237,  237,  238,  238,  702,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
      244,  244,  701,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  188,  188,  259,
      259,  188,  188,  700,  125,  250,  250,  250,  125,  125,
      697,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      243,  320,  243,  320,  181,  188,  253,  253,  253,  180,

      263,  263,  188,  264,  264,  125,  125,  180,  689,  125,
      125,  181,  391,  180,  391,  181,  181,  181,  181,  181,
      181,  181,  181,  688,  181,  181,   22,  266,  266,  684,
       22,   22,  276,  276,   22,  674,   22,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,

       74,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  668,  102,
      102,  102,  102,  102,  102,  102,  243,  286,  286,  296,
      296,  268,  268,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  268,  124,  124,  124,  124,
      124,  124,  124,  392,  251,  392,  251,  645,  267,  267,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  182,  182,  182,  182,  182,

      182,  182,  182,  182,  182,  182,  182,  637,  182,  182,
      267,  269,  269,  628,  182,  183,  272,  272,  273,  273,
      574,  270,  270,  183,  183,  183,  183,  183,  574,  183,
      183,  183,  269,  620,  183,  274,  274,  619,  183,  183,
      183,  183,  183,  251,  270,  272,  605,  271,  271,  183,
      277,  277,  273,  183,  272,  272,  604,  183,  183,  596,
      183,  183,  183,  274,  183,  183,  186,  186,  594,  186,
      251,  186,  271,  593,  186,  186,  297,  297,  275,  275,
      186,  277,  592,  187,  187,  380,  380,  393,  186,  393,
      278,  278,  187,  295,  295,  187,  187,  187,  187,  187,

      187,  186,  186,  275,  591,  186,  186,  186,  186,  187,
      187,  187,  187,  194,  194,  194,  194,  194,  194,  194,
      206,  206,  278,  194,  194,  194,  194,  295,  206,  206,
      206,  206,  279,  279,  590,  285,  285,  383,  383,  215,
      215,  206,  206,  206,  206,  206,  206,  215,  215,  215,
      215,  386,  386,  589,  281,  281,  285,  279,  232,  232,
      215,  215,  215,  215,  215,  215,  232,  232,  232,  232,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  232,
      232,  232,  232,  232,  232,  281,  282,  282,  242,  242,
      242,  242,  242,  242,  242,  588,  239,  241,  242,  242,

      242,  242,  280,  280,  587,  241,  241,  241,  241,  241,
      584,  241,  241,  241,  298,  298,  241,  583,  293,  293,
      241,  241,  241,  241,  241,  280,  282,  283,  283,  284,
      284,  241,  526,  287,  287,  241,  288,  288,  525,  241,
      241,  293,  241,  241,  241,  298,  241,  241,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  257,  287,  283,
      524,  289,  289,  523,  284,  257,  257,  257,  257,  257,
      522,  257,  257,  257,  521,  288,  257,  291,  291,  520,
      257,  257,  257,  257,  257,  289,  519,  300,  300,  516,
      304,  257,  304,  289,  300,  257,  514,  290,  290,  257,

      257,  513,  257,  257,  257,  512,  257,  257,  260,  260,
      260,  260,  260,  260,  260,  292,  292,  291,  260,  260,
      260,  260,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  290,  290,  294,  294,  387,  387,  394,  510,  394,
      292,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  509,  375,  375,  375,
      375,  375,  375,  395,  499,  395,  294,  294,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  498,  302,  302,  302,  302,
      302,  302,  302,  483,  487,  483,  487,  489,  497,  489,

      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  496,  304,  468,  468,  495,
      381,  381,  303,  490,  468,  490,  303,  303,  381,  381,
      381,  381,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  381,  381,  381,  381,  381,  381,  502,  502,  507,
      507,  579,  579,  303,  303,  581,  581,  303,  303,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  367,  367,  367,

      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,

      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  382,  382,  511,
      515,  511,  515,  388,  388,  382,  382,  382,  382,  585,
      585,  388,  388,  388,  388,  517,  494,  517,  382,  382,
      382,  382,  382,  382,  388,  388,  388,  388,  388,  388,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  493,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  398,  398,

      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  518,  398,  518,
      629,  629,  398,  630,  630,  398,  398,  632,  632,  398,
      398,  398,  398,  492,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  766,  398,  766,  398,
      398,  398,  399,  399,  399,  399,  491,  399,  399,  399,
      399,  488,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,

      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  400,  400,  400,  400,
      400,  400,  486,  400,  400,  400,  400,  633,  633,  400,
      400,  400,  400,  400,  400,  400,  400,  485,  400,  400,
      400,  400,  400,  400,  400,  484,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  482,  400,  400,  400,  400,  401,
      401,  401,  401,  401,  481,  401,  631,  631,  631,  401,

      401,  401,  401,  401,  401,  401,  480,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,

      403,  403,  403,  403,  403,  403,  403,  403,  403,  404,
      479,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  478,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  477,  404,
      404,  404,  404,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  476,  405,  405,  405,  405,  405,

      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  475,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  474,  406,  406,  406,  406,  406,  406,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,

      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  473,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,

      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  472,  420,  634,  634,
      471,  420,  635,  635,  420,  420,  769,  769,  420,  420,
      420,  420,  470,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  767,  420,  767,  420,  420,
      420,  421,  421,  421,  421,  469,  421,  421,  421,  421,
      408,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,

      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  422,  422,  422,  422,  422,
      422,  379,  422,  422,  422,  422,  771,  771,  422,  422,
      422,  422,  422,  422,  422,  422,  378,  422,  422,  422,
      422,  422,  422,  422,  345,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  312,  422,  422,  422,  422,  423,  423,
      423,  423,  423,  781,  423,  781,  311,  301,  423,  423,
      423,  423,  423,  423,  423,  299,  423,  423,  423,  423,

      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  426,  265,

      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  262,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  252,  426,  426,
      426,  426,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  248,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  247,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  245,  428,  428,  428,  428,  428,  428,  430,  430,
      430,  431,  431,  431,  432,  432,  432,  240,  433,  433,
      433,  235,  430,  430,  216,  431,  431,  202,  432,  432,
      201,  200,  433,  433,  434,  434,  434,  435,  435,  435,
      436,  436,  436,  545,  545,  545,  197,  191,  434,  434,
      184,  435,  435,  170,  436,  436,  137,  431,  432,  433,

      437,  437,  437,  438,  438,  438,  439,  439,  439,  440,
      440,  440,  130,  127,  437,  437,  435,  438,  438,  123,
      439,  439,  108,  440,  440,  441,  441,  441,  105,  442,
      442,  442,  782,  436,  782,  443,  443,  443,  545,  441,
      441,  100,  437,  442,  442,  444,  444,  444,  438,  443,
      443,   93,   89,  439,  445,  445,  445,   88,   87,  444,
      444,  446,  446,  446,  442,  447,  447,  447,  445,  445,
      448,  448,  448,   84,   80,  446,  446,   73,   67,  447,
      447,   47,   26,  442,  448,  448,   23,  449,  449,  449,
        6,  450,  450,  450,    5,  451,  451,  451,  444,    0,

      447,  449,  449,    0,    0,  450,  450,    0,  445,  451,
      451,  452,  452,  452,  446,  453,  453,  453,  454,  454,
      454,  643,  643,  643,    0,  452,  452,  449,  450,  453,
      453,    0,  454,  454,    0,    0,  449,  455,  455,  455,
        0,  456,  456,  456,    0,  457,  457,  457,  794,  451,
      794,  455,  455,  452,    0,  456,  456,  453,  454,  457,
      457,  458,  458,  458,  459,  459,  459,  460,  460,  460,
        0,    0,    0,  643,    0,  458,  458,    0,  459,  459,
        0,  460,  460,    0,    0,  455,  456,  461,  461,  461,
      462,  462,  462,  621,  621,    0,  621,  621,  621,  621,

      458,  461,  461,  465,  462,  462,    0,  465,  465,  465,
      465,  465,  465,  503,  503,    0,    0,    0,  460,    0,
        0,  503,  503,  503,  503,    0,  546,  546,  546,  462,
      547,  547,  547,    0,  503,  503,  503,  503,  503,  503,
      546,  546,    0,  461,  547,  547,  548,  548,  548,  549,
      549,  549,  550,  550,  550,  551,  551,  551,    0,    0,
      548,  548,    0,  549,  549,    0,  550,  550,    0,  551,
      551,    0,    0,    0,  552,  552,  552,    0,  553,  553,
      553,  554,  554,  554,    0,    0,  549,  550,  552,  552,
        0,    0,  553,  553,    0,  554,  554,  555,  555,  555,

        0,    0,  551,  556,  556,  556,    0,  557,  557,  557,
        0,  555,  555,  558,  558,  558,  559,  559,  559,  552,
      553,  557,  557,  560,  560,  560,  554,  558,  558,    0,
      559,  559,  561,  561,  561,    0,    0,  560,  560,  562,
      562,  562,  555,  556,    0,  556,  561,  561,    0,  557,
        0,  558,    0,  562,  562,  563,  563,  563,  564,  564,
      564,  565,  565,  565,  566,  566,  566,    0,    0,  563,
      563,    0,  564,  564,    0,  565,  565,    0,  566,  566,
      561,  567,  567,  567,    0,  568,  568,  568,    0,    0,
      562,  569,  569,  569,    0,  567,  567,    0,  565,  568,

      568,    0,    0,  564,    0,  569,  569,    0,  563,  570,
      570,  570,  571,  571,  571,    0,  566,  572,  572,  572,
      573,  573,  573,  570,  570,    0,  571,  571,  602,  602,
      602,  572,  572,    0,  573,  573,    0,  568,  661,  661,
      661,  661,  602,  602,  569,    0,    0,    0,  570,  575,
        0,  571,    0,  575,  575,  575,  575,  575,  575,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,    0,
      571,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  578,  580,  580,    0,    0,    0,    0,  580,    0,
      580,    0,  578,    0,    0,    0,    0,  582,    0,  580,

      578,    0,  582,    0,  578,  578,    0,    0,  578,    0,
        0,    0,    0,  582,    0,  578,  580,    0,    0,  580,
      580,  580,    0,  580,  580,  582,  595,  595,    0,    0,
      582,  597,  597,  597,  595,  595,  595,  595,    0,  598,
      598,  598,  599,  599,  599,  597,  597,  595,  595,  595,
      595,  595,  595,  598,  598,    0,  599,  599,  600,  600,
      600,  601,  601,  601,  603,  603,  603,  606,  606,  606,
        0,    0,  600,  600,    0,  601,  601,    0,  603,  603,
        0,  606,  606,    0,  597,    0,  598,  607,  607,  607,
      608,  608,  608,  600,    0,    0,  599,    0,    0,  603,

        0,  607,  607,    0,  608,  608,  609,  609,  609,  610,
      610,  610,    0,    0,  601,  606,  611,  611,  611,    0,
      609,  609,    0,  610,  610,    0,  607,    0,    0,    0,
      611,  611,  612,  612,  612,  613,  613,  613,  614,  614,
      614,  608,  615,  615,  615,  609,  612,  612,    0,  613,
      613,  611,  614,  614,    0,    0,  615,  615,  616,  616,
      616,  617,  617,  617,  618,  618,  618,  612,  644,  644,
      644,    0,  616,  616,  613,  617,  617,    0,  618,  618,
      614,    0,  644,  644,    0,    0,    0,  624,  624,  624,
      624,    0,  624,  624,  624,  624,  616,  624,  624,  624,

      624,  624,  624,  675,  675,  675,  624,  617,  622,  622,
      622,  622,  622,    0,  622,    0,    0,    0,  622,  622,
      622,  622,  622,  622,  622,    0,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  623,    0,  623,  675,    0,    0,  623,    0,
        0,  623,  623,    0,    0,  623,  623,  623,  623,    0,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,    0,  623,    0,  623,  623,  623,  625,  625,
        0,  625,  625,  625,  625,    0,    0,  625,  625,  625,

      625,  625,  625,  625,  625,    0,  625,  625,  625,  625,
      625,  625,  625,    0,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,    0,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  636,  636,  638,  638,  638,  639,  639,  639,

      636,  636,  636,  636,    0,  640,  640,  640,  638,  638,
        0,  639,  639,  636,  636,  636,  636,  636,  636,  640,
      640,  641,  641,  641,  642,  642,  642,  647,  647,  647,
        0,  648,  648,  648,    0,  641,  641,    0,  642,  642,
        0,  647,  647,    0,  640,  648,  648,    0,  638,    0,
      639,    0,    0,  649,  649,  649,  650,  650,  650,    0,
        0,  651,  651,  651,    0,    0,  642,  649,  649,    0,
      650,  650,  641,    0,  647,  651,  651,  652,  652,  652,
        0,  653,  653,  653,    0,    0,  654,  654,  654,    0,
        0,  652,  652,    0,  650,  653,  653,    0,    0,  649,

      654,  654,  655,  655,  655,  656,  656,  656,  670,  670,
      670,  671,  671,  671,  651,    0,  655,  655,    0,  656,
      656,    0,  670,  670,    0,  671,  671,    0,    0,    0,
      652,    0,    0,    0,    0,    0,    0,    0,    0,  654,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  658,  658,  658,  658,  658,  658,  658,  658,

      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  662,  662,  662,  662,  662,  662,  662,  662,

      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  663,    0,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,    0,
      663,  663,  663,  663,  663,  663,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,    0,  664,  664,  664,  664,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,    0,  665,  665,

      665,  665,  665,  665,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,    0,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      667,  667,  669,  669,  669,  672,  672,  672,  667,  667,
      667,  667,    0,  673,  673,  673,  669,  669,    0,  672,
      672,  667,  667,  667,  667,  667,  667,  673,  673,  677,
      677,  677,  678,  678,  678,  679,  679,  679,    0,    0,
      680,  680,  680,  677,  677,    0,  678,  678,    0,  679,
      679,    0,    0,  669,  680,  680,  681,  681,  681,    0,

        0,  673,    0,  672,    0,    0,  682,  682,  682,    0,
      681,  681,    0,    0,    0,    0,    0,  679,    0,  680,
      682,  682,    0,  690,  690,  690,  678,    0,  683,  683,
      685,  685,  685,    0,    0,  681,  683,  683,  683,  683,
        0,  686,  686,  686,  685,  685,    0,    0,  682,  683,
      683,  683,  683,  683,  683,  686,  686,  687,  687,  687,
      690,  691,  691,  691,    0,  692,  692,  692,    0,  685,
        0,  687,  687,    0,    0,  691,  691,    0,  690,  692,
      692,  693,  693,  693,  694,  694,  694,    0,    0,    0,
        0,    0,    0,    0,    0,  693,  693,    0,  694,  694,

        0,    0,  692,    0,  687,    0,  691,  695,  695,  695,
        0,    0,  706,  706,  706,  696,  696,  698,  698,  698,
        0,  695,  695,  696,  696,  696,  696,    0,  699,  699,
      699,  698,  698,  704,  704,  704,  696,  696,  696,  696,
      696,  696,  699,  699,  705,  705,  705,  704,  704,  706,
      707,  707,  707,    0,    0,  695,    0,    0,  705,  705,
      714,  714,  714,    0,  707,  707,    0,  706,  704,  715,
      715,  715,    0,    0,  714,  714,  718,  718,  718,  705,
      724,  724,  724,  715,  715,  732,  732,  732,    0,    0,
      718,  718,    0,    0,  724,  724,    0,  707,    0,  732,

      732,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  724,
        0,    0,  715,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  762,  762,  762,  762,  762,  762,  762,

      762,  762,  762,  762,  762,  762,  762,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  768,
      768,  768,  768,  770,  770,  770,  770,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  773,  773,  773,  773,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  775,  775,    0,  775,  775,  775,
      775,    0,  775,  775,  775,  775,  775,  776,  776,    0,

        0,  776,  776,  776,  776,    0,  776,  776,  776,  776,
      776,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  779,    0,    0,  779,  779,
      779,  779,  779,  779,  779,    0,    0,  779,  779,  780,
      780,    0,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  783,  783,  783,  783,  784,  784,  784,
      784,  785,  785,  785,  785,  786,  786,  786,  786,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  788,  788,    0,  788,  788,  788,  788,
        0,  788,  788,  788,  788,  788,  789,  789,    0,    0,

      789,  789,  789,  789,    0,  789,  789,  789,  789,  789,
      791,    0,    0,  791,  791,  791,  791,  791,  791,  791,
        0,    0,  791,  791,  792,  792,    0,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  793,  793,
        0,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  795,  795,  795,  795,  796,  796,    0,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      797,  797,    0,  797,    0,  797,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../mli-root/src/database-lexer.ll"
/* Copyright (C) 2017, 2021-2022 Hans Åberg.

   This file is part of MLI, MetaLogic Inference.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
#line 19 "../../mli-root/src/database-lexer.ll"

#if (YY_FLEX_MAJOR_VERSION < 2 || (YY_FLEX_MAJOR_VERSION == 2 && YY_FLEX_MINOR_VERSION < 6)\
  || (YY_FLEX_MAJOR_VERSION == 2 && YY_FLEX_MINOR_VERSION == 6 && YY_FLEX_SUBMINOR_VERSION < 4))
#error "Flex version 2.6.4 or later required."
#endif

#include "database-parser.hh"

#include <iostream>
#include <fstream>
#include <locale>
#include <set>
#include <stack>
#include <string>
#include <sstream>
#include <vector>

#include "proposition.hh"
#include "basictype.hh"


#define YYERRCODE	256

#define the_text std::string(yytext, yyleng)
#define get_text yylval.text = std::string(yytext, yyleng)

std::vector<std::string> dirs; // Directory search-paths; for included files.

bool verbose = false;

bool declaration_context = false;
bool binder_declaration_context = false;
bool meta_context = false;
bool maybe_set_declaration_context = false;
bool proofline_database_context = false;
bool statement_substitution_context = false;
int bracket_depth = 0;
mli::database_parser::token_type declared_token = mli::free_variable_context;
int declared_type = 0;

int current_token = 0;

std::stack<YY_BUFFER_STATE> include_stack;
std::stack<mli::location_type> location_stack;

std::stack<std::istream::pos_type> current_position_stack;
std::istream::pos_type current_position = 0;

std::stack<std::istream::pos_type> line_position_stack;
std::istream::pos_type line_position = 0;

std::stack<std::string> filename_stack;
std::stack<std::string> filepath_stack;

int logic_prefix_count = 0;

bool old_line_comment = false;
bool old_block_comment = false;

std::string str;

mli::kleenean directive_type = false;

mli::location_type loc0, loc1;

#line 1964 "../../mli-root/src/database-lexer.cc"

/*
whitespace
" " U+2002 en space
" " U+2003 em space
" " U+2004 three-per-em space
" " U+2005 four-per-em space
" " U+2006 six-per-em space
" " U+2007 figure space
" " U+2008 punctuation space
" " U+2009 thin space
" " U+200A hair space
" " U+205F medium mathematical space
*/
/* UTF-8 character with valid Unicode code point. */
#line 214 "../../mli-root/src/database-lexer.ll"
#define YY_USER_ACTION  yylloc.columns(length_utf8(yytext)); current_position += yyleng;
#line 1982 "../../mli-root/src/database-lexer.cc"
#line 1983 "../../mli-root/src/database-lexer.cc"

#define INITIAL 0
#define comment 1
#define line_comment 2
#define block_comment 3
#define directive 4
#define any_identifier 5
#define C_string 6
#define find_set_variable 7
#define find_vertical_line 8
#define include_file 9
#define logic_prefix 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 218 "../../mli-root/src/database-lexer.ll"


#line 221 "../../mli-root/src/database-lexer.ll"
  mli::semantic_type& yylval = *yylvalp;
  mli::location_type& yylloc = *yyllocp;

  if (current_token != 0) { int tok = current_token; current_token = 0; return tok; }

  yylloc.step();


#line 2137 "../../mli-root/src/database-lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 757 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5277 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 229 "../../mli-root/src/database-lexer.ll"
{ yylloc.step(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 230 "../../mli-root/src/database-lexer.ll"
{ yylloc.lines(yyleng); yylloc.step(); line_position = current_position; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 233 "../../mli-root/src/database-lexer.ll"
{ BEGIN(include_file); }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 235 "../../mli-root/src/database-lexer.ll"
/* Eat the whitespace. */
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 237 "../../mli-root/src/database-lexer.ll"
{ /* Get the include file name. */
  include_stack.push(YY_CURRENT_BUFFER);
  std::string str;

  if (yytext[0] == '"')
    str.append(yytext + 1, yyleng - 2);
  else
    str.append(yytext, yyleng);

  std::string path = str; // Full path of file str relative dir directory paths if needed.

  auto fbp = new std::filebuf();
  fbp->open(str, std::ios_base::in);

  if (!fbp->is_open()) {
    // Opening file str failed, so try with directory paths prepended:
    for (auto& i: dirs) {
      path = (i.back() == '/')? i : i + "/";
      path += str;

      fbp->open(path, std::ios_base::in);

      if (fbp->is_open())
        break;
    }

    if (!fbp->is_open()) {
      delete fbp;
      throw mli::database_parser::syntax_error(yylloc, "File " + str + " not found.");
    }
  }

  yyin.rdbuf(fbp);

  filename_stack.push(str);
  filepath_stack.push(path);

  std::cout << "Begin reading " << filename_stack.top();
  if (filename_stack.top() != filepath_stack.top())
    std::cout << " (" << filepath_stack.top() << ")";
  std::cout << std::endl;

  location_stack.push(yylloc);

  current_position_stack.push(current_position);
  current_position = 0;

  line_position_stack.push(line_position);
  line_position = 0;

  yylloc.initialize(&filepath_stack.top());

  yy_switch_to_buffer(yy_create_buffer(yyin, YY_BUF_SIZE));
  BEGIN(INITIAL);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 294 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::include_key; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 295 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::end_key; }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 297 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::formal_system_key; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 298 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::theory_key; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 300 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::postulate_key; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 301 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::axiom_key; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 302 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::rule_key; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 303 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::conjecture_key; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 305 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::definition_key; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 307 "../../mli-root/src/database-lexer.ll"
{ get_text; yylval.number = mli::theorem::lemma_; return mli::database_parser::token::theorem_key; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 308 "../../mli-root/src/database-lexer.ll"
{ get_text; yylval.number = mli::theorem::proposition_; return mli::database_parser::token::theorem_key; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 309 "../../mli-root/src/database-lexer.ll"
{ get_text; yylval.number = mli::theorem::theorem_; return mli::database_parser::token::theorem_key; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 310 "../../mli-root/src/database-lexer.ll"
{ get_text; yylval.number = mli::theorem::corollary_; return mli::database_parser::token::theorem_key; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 312 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::proof_key; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 313 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::end_of_proof_key; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 315 "../../mli-root/src/database-lexer.ll"
{ get_text;
               proofline_database_context = true;
               bracket_depth = 0;
               statement_substitution_context = false;
               return mli::database_parser::token::by_key; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 321 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::result_key; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 322 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::premise_key; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 325 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::metainfer_key; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 327 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::metaor_key; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 328 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::metaand_key; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 329 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::metanot_key; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 332 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::infer_key; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 334 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::object_identical_key; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 335 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::object_not_identical_key; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 336 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::meta_identical_key; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 337 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::meta_not_identical_key; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 339 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::fail_key; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 340 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::succeed_key; }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 342 "../../mli-root/src/database-lexer.ll"
{ get_text; meta_context = true; return mli::database_parser::token::free_for_key; }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 343 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::free_in_key; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 345 "../../mli-root/src/database-lexer.ll"
{ get_text; meta_context = false; return mli::database_parser::token::metain_key; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 348 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::use_key; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 350 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::defined_by_key; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 351 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::defines_key; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 352 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::defined_equal_key; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 354 "../../mli-root/src/database-lexer.ll"
{ declaration_context = true; declared_token = mli::database_parser::token::metaformula_variable;
            declared_type = mli::variable::formula_; return mli::database_parser::token::identifier_variable_key; }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 357 "../../mli-root/src/database-lexer.ll"
{ declaration_context = true; declared_token = mli::database_parser::token::metaformula_variable;
            declared_type = mli::variable::formula_sequence_; return mli::database_parser::token::identifier_variable_key; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 360 "../../mli-root/src/database-lexer.ll"
{ declaration_context = true; declared_token = mli::database_parser::token::object_formula_variable;
            declared_type = mli::variable::formula_; return mli::database_parser::token::identifier_variable_key; }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 362 "../../mli-root/src/database-lexer.ll"
{
             declaration_context = true; declared_token = mli::database_parser::token::predicate_variable;
             declared_type = mli::variable::predicate_; return mli::database_parser::token::identifier_variable_key; }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 365 "../../mli-root/src/database-lexer.ll"
{
            declaration_context = true; declared_token = mli::database_parser::token::atom_variable;
            declared_type = mli::variable::atom_; return mli::database_parser::token::identifier_variable_key; }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 369 "../../mli-root/src/database-lexer.ll"
{
            declaration_context = true; declared_token = mli::database_parser::token::function_variable;
            declared_type = mli::variable::function_; return mli::database_parser::token::identifier_variable_key; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 373 "../../mli-root/src/database-lexer.ll"
{ declaration_context = true; declared_token = mli::database_parser::token::object_variable;
            declared_type = mli::variable::object_; return mli::database_parser::token::identifier_variable_key; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 376 "../../mli-root/src/database-lexer.ll"
{ declaration_context = true; declared_token = mli::database_parser::token::code_variable;
             declared_type = mli::variable::code_; return mli::database_parser::token::identifier_variable_key; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 379 "../../mli-root/src/database-lexer.ll"
{ bound_variable_type = database_parser::token::all_variable; symbol_table.push_level(false);
        return mli::database_parser::token::all_key; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 381 "../../mli-root/src/database-lexer.ll"
{ bound_variable_type = database_parser::token::exist_variable; symbol_table.push_level(false);
        return mli::database_parser::token::exist_key; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 385 "../../mli-root/src/database-lexer.ll"
{
            declaration_context = true; declared_token = mli::database_parser::token::function_key;
            declared_type = constant::function; return mli::database_parser::token::identifier_function_key; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 388 "../../mli-root/src/database-lexer.ll"
{
            declaration_context = true; declared_token = mli::database_parser::token::predicate_key;
            declared_type = constant::predicate; return mli::database_parser::token::identifier_function_key; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 393 "../../mli-root/src/database-lexer.ll"
{ declaration_context = true; declared_token = mli::database_parser::token::metapredicate_constant;
               declared_type = constant::predicate; return mli::database_parser::token::identifier_constant_key; }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 395 "../../mli-root/src/database-lexer.ll"
{
            declaration_context = true; declared_token = mli::database_parser::token::predicate_constant;
            declared_type = constant::predicate; return mli::database_parser::token::identifier_constant_key; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 398 "../../mli-root/src/database-lexer.ll"
{ declaration_context = true; declared_token = mli::database_parser::token::atom_constant;
               declared_type = constant::logic; return mli::database_parser::token::identifier_constant_key; }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 401 "../../mli-root/src/database-lexer.ll"
{
            declaration_context = true; declared_token = mli::database_parser::token::function_constant;
            declared_type = formula::object; return mli::database_parser::token::identifier_constant_key; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 404 "../../mli-root/src/database-lexer.ll"
{ declaration_context = true; declared_token = mli::database_parser::token::term_constant;
               declared_type = formula::object; return mli::database_parser::token::identifier_constant_key; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 407 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::implies_key; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 408 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::impliedby_key; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 409 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::equivalent_key; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 411 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::logical_and_key; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 412 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::logical_or_key; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 413 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::logical_not_key; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 415 "../../mli-root/src/database-lexer.ll"
{ declaration_context = false;
       bound_variable_type = free_variable_context;
       return mli::database_parser::token::colon_key; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 418 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::comma_key; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 419 "../../mli-root/src/database-lexer.ll"
{ declaration_context = false;
       bound_variable_type = free_variable_context;
       return mli::database_parser::token::period_key; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 423 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::semicolon_key; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 426 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::less_key; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 427 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::greater_key; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 428 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::less_or_equal_key; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 429 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::greater_or_equal_key; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 431 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::not_less_key; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 432 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::not_greater_key; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 433 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::not_less_or_equal_key; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 434 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::not_greater_or_equal_key; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 436 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::equal_key; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 437 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::not_equal_key; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 439 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::divides_key; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 440 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::not_divides_key; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 442 "../../mli-root/src/database-lexer.ll"
{ get_text; bound_variable_type = free_variable_context; return mli::database_parser::token::mapsto_key; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 443 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::Mapsto_key; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 445 "../../mli-root/src/database-lexer.ll"
{ get_text; bound_variable_type = database_parser::token::function_map_variable; symbol_table.push_level(false);
      return mli::database_parser::token::function_map_prefix_key; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 448 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::degree_key; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 449 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::bullet_key; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 451 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::subscript_x_key; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 454 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::left_parenthesis_key; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 455 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::right_parenthesis_key; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 457 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::superscript_left_parenthesis_key; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 458 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::superscript_right_parenthesis_key; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 460 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::subscript_left_parenthesis_key; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 461 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::subscript_right_parenthesis_key; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 464 "../../mli-root/src/database-lexer.ll"
{ if (proofline_database_context)
         ++bracket_depth;
       if (bracket_depth == 1)
         statement_substitution_context = true;
       return mli::database_parser::token::left_bracket_key; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 469 "../../mli-root/src/database-lexer.ll"
{ if (proofline_database_context)
         --bracket_depth;
       return mli::database_parser::token::right_bracket_key; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 473 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::left_angle_bracket_key; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 474 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::right_angle_bracket_key; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 476 "../../mli-root/src/database-lexer.ll"
{ maybe_set_declaration_context = true;
       BEGIN(find_set_variable);
       return mli::database_parser::token::left_brace_key; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 479 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::vertical_line_key; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 480 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::right_brace_key; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 482 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::tilde_key; }
	YY_BREAK

case 101:
YY_RULE_SETUP
#line 485 "../../mli-root/src/database-lexer.ll"
{ yylloc.step(); }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 486 "../../mli-root/src/database-lexer.ll"
{ yylloc.lines(yyleng); yylloc.step(); line_position = current_position; }
	YY_BREAK


case 103:
YY_RULE_SETUP
#line 490 "../../mli-root/src/database-lexer.ll"
{ yylloc.step(); }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 491 "../../mli-root/src/database-lexer.ll"
{ yylloc.lines(yyleng); yylloc.step(); line_position = current_position; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 493 "../../mli-root/src/database-lexer.ll"
{
    // The set bar | as in {𝒙|𝑨}, or ∈ as in {𝒙∈𝑆|𝑨} has been found, so 𝒙 in yylval.text
    // should be defined at a new symbol table secondary level as a bound set variable.
    // Save "|" in current_token so that it will returned on the next lexer call.
    if (std::string(yytext, yyleng) == "|")
      current_token = mli::database_parser::token::vertical_line_key;
    else
      current_token = mli::database_parser::token::in_key;
    bound_variable_type = database_parser::token::set_variable;
    maybe_set_declaration_context = false;
    BEGIN(INITIAL);

    symbol_table.push_level(false);
    database_parser::token_type ret = define_variable(yylval);
    bound_variable_type = mli::free_variable_context;
    return database_parser::token::set_variable_definition;
  }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 511 "../../mli-root/src/database-lexer.ll"
{ yyless(0); BEGIN(INITIAL); maybe_set_declaration_context = false;
      database_parser::token_type ret = define_variable(yylval);
      return ret;
  }
	YY_BREAK

case 107:
YY_RULE_SETUP
#line 518 "../../mli-root/src/database-lexer.ll"
{
    bound_variable_type = database_parser::token::is_set_variable;
    get_text;
    return mli::database_parser::token::is_set_key; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 522 "../../mli-root/src/database-lexer.ll"
{
    bound_variable_type = database_parser::token::is_set_variable;
    get_text;
    return mli::database_parser::token::power_set_key; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 527 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::empty_set_key; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 528 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::in_key; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 529 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::not_in_key; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 531 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::set_complement_key; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 532 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::set_union_key; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 533 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::set_intersection_key; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 534 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::set_difference_key; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 535 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::set_union_operator_key; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 536 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::set_intersection_operator_key; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 537 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::subset_key; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 538 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::proper_subset_key; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 539 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::superset_key; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 540 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::proper_superset_key; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 543 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::slash_key; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 544 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::backslash_key; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 547 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::factorial_key; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 549 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::mult_key; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 550 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::plus_key; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 551 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::minus_key; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 554 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::if_key; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 555 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::then_key; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 556 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::else_key; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 558 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::while_key; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 559 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::do_key; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 560 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::loop_key; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 561 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::for_key; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 563 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::break_key; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 564 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::continue_key; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 566 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::throw_key; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 567 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::try_key; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 568 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::catch_key; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 571 "../../mli-root/src/database-lexer.ll"
{
  get_text;
  yylval.object = mli::ref<mli::integer>(mli::make, yytext);
  return mli::database_parser::token::natural_number_value;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 577 "../../mli-root/src/database-lexer.ll"
{
  get_text;
  yylval.object = mli::ref<mli::integer>(mli::make, yytext);
  return mli::database_parser::token::integer_value;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 584 "../../mli-root/src/database-lexer.ll"
{
  get_text;
  yylval.object = mli::ref<mli::integer>(mli::make, subscript_to_string(yytext));
  return mli::database_parser::token::subscript_natural_number_value;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 590 "../../mli-root/src/database-lexer.ll"
{
  get_text;
  yylval.object = mli::ref<mli::integer>(mli::make, subscript_to_string(yytext));
  return mli::database_parser::token::subscript_integer_value;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 597 "../../mli-root/src/database-lexer.ll"
{
  get_text;
  yylval.object = mli::ref<mli::integer>(mli::make, superscript_to_string(yytext));
  return mli::database_parser::token::superscript_natural_number_value;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 603 "../../mli-root/src/database-lexer.ll"
{
  get_text;
  yylval.object = mli::ref<mli::integer>(mli::make, superscript_to_string(yytext));
  return mli::database_parser::token::superscript_integer_value;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 612 "../../mli-root/src/database-lexer.ll"
{
  get_text;

  if (maybe_set_declaration_context) {
    BEGIN(find_vertical_line);
    YY_BREAK;
  }

  database_parser::token_type ret = define_variable(yylval);

  return ret;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 626 "../../mli-root/src/database-lexer.ll"
{ get_text; return mli::database_parser::token::label_key; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 629 "../../mli-root/src/database-lexer.ll"
{ yylval.text.clear(); BEGIN(any_identifier); }
	YY_BREAK

case 149:
YY_RULE_SETUP
#line 632 "../../mli-root/src/database-lexer.ll"
{ /* Closing quote - all done. Text now in yylval.text. */
    BEGIN(INITIAL);

    database_parser::token_type ret = define_variable(yylval);

    if (maybe_set_declaration_context) {
      BEGIN(find_vertical_line);
      YY_BREAK;
    }

    return ret;
  }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 645 "../../mli-root/src/database-lexer.ll"
{
    BEGIN(INITIAL);
    throw mli::database_parser::syntax_error(yylloc,
     "String with “; an earlier string might be unterminated.");
  }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 650 "../../mli-root/src/database-lexer.ll"
{ yylval.text += "“"; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 651 "../../mli-root/src/database-lexer.ll"
{ yylval.text += "”"; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 653 "../../mli-root/src/database-lexer.ll"
{ /* Octal escape sequence. */
	  int result;
	  std::sscanf(yytext + 1, "%o", &result);
	  if (result > 0xff) {
      BEGIN(INITIAL);
      throw mli::database_parser::syntax_error(yylloc,
        "String octal escape " + the_text + " is out-of-bounds, must be ≤ \\ 377.");
    }
	  yylval.text += (char)result;
	}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 664 "../../mli-root/src/database-lexer.ll"
{ /* Hexadecimal escape sequence. */
	  int result;
	  std::sscanf(yytext + 2, "%x", &result);
	  if (result > 0xff) {
      // Can actually not get here, as scanning for max 2 hex digits!
      BEGIN(INITIAL);
      throw mli::database_parser::syntax_error(yylloc,
        "String hexadecimal escape " + the_text + " is out-of-bounds, must be ≤ \\xff.");
    }
	  yylval.text += (char)result;
	}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 676 "../../mli-root/src/database-lexer.ll"
{ /* Hexadecimal escape sequence to give UTF-8 characters. */
    yylval.text += to_utf8(std::stoul(yytext + 2, nullptr, 16));
	}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 680 "../../mli-root/src/database-lexer.ll"
{
    BEGIN(INITIAL);
    throw mli::database_parser::syntax_error(yylloc,
      "Bad string escape sequence " + the_text);
  }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 686 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\\'; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 687 "../../mli-root/src/database-lexer.ll"
{ ; /* Non-character, used to delimit numeric escapes */ }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 689 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\a'; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 690 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\b'; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 691 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\f'; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 692 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\n'; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 693 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\r'; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 694 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\t'; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 695 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\v'; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 697 "../../mli-root/src/database-lexer.ll"
{ yylval.text += the_text; }
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 698 "../../mli-root/src/database-lexer.ll"
{
    BEGIN(INITIAL); yylloc.lines(yyleng); yylloc.step(); line_position = current_position;
    throw mli::database_parser::syntax_error(yylloc, "Newline in string.");
  }
	YY_BREAK


case 168:
YY_RULE_SETUP
#line 706 "../../mli-root/src/database-lexer.ll"
{ yyless(0); BEGIN(INITIAL); maybe_set_declaration_context = false; }
	YY_BREAK

case 169:
YY_RULE_SETUP
#line 710 "../../mli-root/src/database-lexer.ll"
{ logic_prefix_count = 1; BEGIN(logic_prefix); }
	YY_BREAK

case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 713 "../../mli-root/src/database-lexer.ll"
{}    /* Eat the whitespace. */
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 714 "../../mli-root/src/database-lexer.ll"
{ return mli::database_parser::token::prefix_not_key; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 715 "../../mli-root/src/database-lexer.ll"
{ get_text; ++logic_prefix_count; return mli::database_parser::token::prefix_or_key; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 716 "../../mli-root/src/database-lexer.ll"
{ get_text; ++logic_prefix_count; return mli::database_parser::token::prefix_and_key; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 717 "../../mli-root/src/database-lexer.ll"
{ get_text; ++logic_prefix_count; return mli::database_parser::token::prefix_implies_key; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 718 "../../mli-root/src/database-lexer.ll"
{ get_text; ++logic_prefix_count; return mli::database_parser::token::prefix_equivalent_key; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 719 "../../mli-root/src/database-lexer.ll"
{
    get_text;
    --logic_prefix_count;
    if (logic_prefix_count < 1) BEGIN(INITIAL);

    auto x = mli::symbol_table.find(yylval.text);

    if (!x) {
      BEGIN(INITIAL);
      throw mli::database_parser::syntax_error(yylloc,
        "Logic prefix variable " + yylval.text + " is not declared.");
    }

    mli::variable* vp = mli::ref_cast<mli::variable*>(x->second);

    // Check if it is a variable which is declared without definition, in which case make
    // a copy with right proof depth, insert it in the symbol table, and change x->second
    // so subsequently the new copy is used instead of the original lookup value.
    if (vp != nullptr && vp->depth_ == -1) {
      mli::ref<mli::variable> v(make, *vp);
      v->depth_ = proof_depth;
      symbol_table.insert_or_assign(yylval.text, {x->first, v});

      x->second = v;
    }

    if (x->first != mli::database_parser::token::object_formula_variable) {
      BEGIN(INITIAL);
      throw mli::database_parser::syntax_error(yylloc,
        "Logic prefix variable " + yylval.text + " is not of type formula.");
    }
    yylval.object = x->second;
    yylval.number = x->first;
    return mli::database_parser::token::prefix_formula_variable;
  }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 754 "../../mli-root/src/database-lexer.ll"
{
    BEGIN(INITIAL);
    throw mli::database_parser::syntax_error(yylloc,
      "Logic prefix expression is inconsistent.");
  }
	YY_BREAK

case 178:
YY_RULE_SETUP
#line 762 "../../mli-root/src/database-lexer.ll"
{ yylval.text.clear(); BEGIN(C_string); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 765 "../../mli-root/src/database-lexer.ll"
{ yy_push_state(line_comment); }
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 767 "../../mli-root/src/database-lexer.ll"
{ yy_pop_state(); yylloc.lines(1); yylloc.step(); line_position = current_position; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 770 "../../mli-root/src/database-lexer.ll"
{ yy_push_state(block_comment); }
	YY_BREAK
/* Block comments. */
case 182:
YY_RULE_SETUP
#line 773 "../../mli-root/src/database-lexer.ll"
{ yy_pop_state(); /* End of the comment. */ }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 775 "../../mli-root/src/database-lexer.ll"
{ yy_push_state(block_comment); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 777 "../../mli-root/src/database-lexer.ll"
{}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 778 "../../mli-root/src/database-lexer.ll"
{ yylloc.lines(yyleng); yylloc.step(); line_position = current_position; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 779 "../../mli-root/src/database-lexer.ll"
{ /* Stray characters ignored, including — and [. */ }
	YY_BREAK
case YY_STATE_EOF(block_comment):
#line 781 "../../mli-root/src/database-lexer.ll"
{
    BEGIN(INITIAL);
    throw mli::database_parser::syntax_error(yylloc,
      "Nested comments not properly closed at end of file.");
  }
	YY_BREAK

case 187:
YY_RULE_SETUP
#line 788 "../../mli-root/src/database-lexer.ll"
{
  BEGIN(INITIAL);
  throw mli::database_parser::syntax_error(yylloc,
    "No block comment open [— earlier to match the close —] at this location.");
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 795 "../../mli-root/src/database-lexer.ll"
{ yylloc.step();
    int r = directive_read(yyin, yylloc);

    if (r != 0) {
      BEGIN(INITIAL);
      return mli::database_parser::token::MLIerror;
    }
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 805 "../../mli-root/src/database-lexer.ll"
{
  BEGIN(INITIAL);
  throw mli::database_parser::syntax_error(yylloc, "No directive open {— to match the close —}.");
}
	YY_BREAK

case 190:
YY_RULE_SETUP
#line 812 "../../mli-root/src/database-lexer.ll"
{ /* Closing quote - all done. */ BEGIN(INITIAL); return mli::database_parser::token::plain_name; }
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 813 "../../mli-root/src/database-lexer.ll"
{
    BEGIN(INITIAL); yylloc.lines(yyleng); yylloc.step(); line_position = current_position;
    throw mli::database_parser::syntax_error(yylloc, "Unterminated C-string.");
  }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 818 "../../mli-root/src/database-lexer.ll"
{ /* Octal escape sequence. */
	  int result;
	  std::sscanf(yytext + 1, "%o", &result);
	  if (result > 0xff) {
      BEGIN(INITIAL);
      throw mli::database_parser::syntax_error(yylloc,
        "String octal escape " + the_text + " is out-of-bounds, must be ≤ \\377.");
    }
	  yylval.text += (char)result;
	}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 829 "../../mli-root/src/database-lexer.ll"
{ /* Hexadecimal escape sequence. */
	  int result;
	  std::sscanf(yytext + 2, "%x", &result);
	  if (result > 0xff) {
      BEGIN(INITIAL);
      throw mli::database_parser::syntax_error(yylloc,
        "String hexadecimal escape " + the_text + " is out-of-bounds, must be ≤ \\xff.");
    }
	  yylval.text += (char)result;
	}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 840 "../../mli-root/src/database-lexer.ll"
{
    BEGIN(INITIAL);
    throw mli::database_parser::syntax_error(yylloc,
      "Bad string escape sequence " + the_text);
  }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 846 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\\'; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 847 "../../mli-root/src/database-lexer.ll"
{ ; /* Non-character, used to delimit numeric escapes */ }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 849 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\a'; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 850 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\b'; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 851 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\f'; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 852 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\n'; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 853 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\r'; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 854 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\t'; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 855 "../../mli-root/src/database-lexer.ll"
{ yylval.text += '\v'; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 857 "../../mli-root/src/database-lexer.ll"
{ yylval.text += yytext[1]; }
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 858 "../../mli-root/src/database-lexer.ll"
{ yylval.text += yytext[1]; yylloc.lines(yyleng); yylloc.step(); line_position = current_position; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 859 "../../mli-root/src/database-lexer.ll"
{ /* " */ yylval.text += the_text; }
	YY_BREAK

case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 863 "../../mli-root/src/database-lexer.ll"
{ get_text;
  throw mli::database_parser::syntax_error(yylloc, "invalid character \"" + yylval.text + "\""); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 866 "../../mli-root/src/database-lexer.ll"
{ std::stringstream ss;
        ss << std::hex << std::uppercase << (unsigned)(unsigned char)yytext[0] << "ₓ";
        throw mli::database_parser::syntax_error(yylloc, "invalid byte " + ss.str()); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(line_comment):
case YY_STATE_EOF(directive):
case YY_STATE_EOF(any_identifier):
case YY_STATE_EOF(C_string):
case YY_STATE_EOF(find_set_variable):
case YY_STATE_EOF(find_vertical_line):
case YY_STATE_EOF(include_file):
case YY_STATE_EOF(logic_prefix):
#line 870 "../../mli-root/src/database-lexer.ll"
{
  if (include_stack.empty())
    return EOF;

  delete yyin.rdbuf();

  yy_delete_buffer(YY_CURRENT_BUFFER);
  yy_switch_to_buffer(include_stack.top());
  include_stack.pop();

  yylloc = location_stack.top();
  location_stack.pop();

  current_position = current_position_stack.top();
  current_position_stack.pop();

  line_position = line_position_stack.top();
  line_position_stack.pop();

  yylloc.step();

  std::cout << "End reading " << filename_stack.top();
  if (filename_stack.top() != filepath_stack.top())
    std::cout << " (" << filepath_stack.top() << ")";
  std::cout << std::endl;

  filename_stack.pop();
  filepath_stack.pop();

  std::cout << "Continue reading " << yylloc << std::endl;
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 902 "../../mli-root/src/database-lexer.ll"
ECHO;
	YY_BREAK
#line 3602 "../../mli-root/src/database-lexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 65);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 757 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 65;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 757 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 756);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 902 "../../mli-root/src/database-lexer.ll"



